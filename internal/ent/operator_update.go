// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2m/internal/ent/chat"
	"github.com/c2micro/c2m/internal/ent/group"
	"github.com/c2micro/c2m/internal/ent/operator"
	"github.com/c2micro/c2m/internal/ent/predicate"
)

// OperatorUpdate is the builder for updating Operator entities.
type OperatorUpdate struct {
	config
	hooks    []Hook
	mutation *OperatorMutation
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ou *OperatorUpdate) Where(ps ...predicate.Operator) *OperatorUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OperatorUpdate) SetUpdatedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OperatorUpdate) SetDeletedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableDeletedAt(t *time.Time) *OperatorUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OperatorUpdate) ClearDeletedAt() *OperatorUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetUsername sets the "username" field.
func (ou *OperatorUpdate) SetUsername(s string) *OperatorUpdate {
	ou.mutation.SetUsername(s)
	return ou
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableUsername(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetUsername(*s)
	}
	return ou
}

// SetToken sets the "token" field.
func (ou *OperatorUpdate) SetToken(s string) *OperatorUpdate {
	ou.mutation.SetToken(s)
	return ou
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableToken(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetToken(*s)
	}
	return ou
}

// ClearToken clears the value of the "token" field.
func (ou *OperatorUpdate) ClearToken() *OperatorUpdate {
	ou.mutation.ClearToken()
	return ou
}

// SetColor sets the "color" field.
func (ou *OperatorUpdate) SetColor(u uint32) *OperatorUpdate {
	ou.mutation.ResetColor()
	ou.mutation.SetColor(u)
	return ou
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableColor(u *uint32) *OperatorUpdate {
	if u != nil {
		ou.SetColor(*u)
	}
	return ou
}

// AddColor adds u to the "color" field.
func (ou *OperatorUpdate) AddColor(u int32) *OperatorUpdate {
	ou.mutation.AddColor(u)
	return ou
}

// SetLast sets the "last" field.
func (ou *OperatorUpdate) SetLast(t time.Time) *OperatorUpdate {
	ou.mutation.SetLast(t)
	return ou
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableLast(t *time.Time) *OperatorUpdate {
	if t != nil {
		ou.SetLast(*t)
	}
	return ou
}

// AddChatIDs adds the "chat" edge to the Chat entity by IDs.
func (ou *OperatorUpdate) AddChatIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddChatIDs(ids...)
	return ou
}

// AddChat adds the "chat" edges to the Chat entity.
func (ou *OperatorUpdate) AddChat(c ...*Chat) *OperatorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddChatIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (ou *OperatorUpdate) AddGroupIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddGroupIDs(ids...)
	return ou
}

// AddGroup adds the "group" edges to the Group entity.
func (ou *OperatorUpdate) AddGroup(g ...*Group) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGroupIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ou *OperatorUpdate) Mutation() *OperatorMutation {
	return ou.mutation
}

// ClearChat clears all "chat" edges to the Chat entity.
func (ou *OperatorUpdate) ClearChat() *OperatorUpdate {
	ou.mutation.ClearChat()
	return ou
}

// RemoveChatIDs removes the "chat" edge to Chat entities by IDs.
func (ou *OperatorUpdate) RemoveChatIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveChatIDs(ids...)
	return ou
}

// RemoveChat removes "chat" edges to Chat entities.
func (ou *OperatorUpdate) RemoveChat(c ...*Chat) *OperatorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveChatIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (ou *OperatorUpdate) ClearGroup() *OperatorUpdate {
	ou.mutation.ClearGroup()
	return ou
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (ou *OperatorUpdate) RemoveGroupIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveGroupIDs(ids...)
	return ou
}

// RemoveGroup removes "group" edges to Group entities.
func (ou *OperatorUpdate) RemoveGroup(g ...*Group) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperatorUpdate) Save(ctx context.Context) (int, error) {
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperatorUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperatorUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperatorUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OperatorUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		if operator.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized operator.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := operator.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ou *OperatorUpdate) check() error {
	if v, ok := ou.mutation.Username(); ok {
		if err := operator.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Operator.username": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Token(); ok {
		if err := operator.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Operator.token": %w`, err)}
		}
	}
	return nil
}

func (ou *OperatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(operator.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(operator.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(operator.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Username(); ok {
		_spec.SetField(operator.FieldUsername, field.TypeString, value)
	}
	if value, ok := ou.mutation.Token(); ok {
		_spec.SetField(operator.FieldToken, field.TypeString, value)
	}
	if ou.mutation.TokenCleared() {
		_spec.ClearField(operator.FieldToken, field.TypeString)
	}
	if value, ok := ou.mutation.Color(); ok {
		_spec.SetField(operator.FieldColor, field.TypeUint32, value)
	}
	if value, ok := ou.mutation.AddedColor(); ok {
		_spec.AddField(operator.FieldColor, field.TypeUint32, value)
	}
	if value, ok := ou.mutation.Last(); ok {
		_spec.SetField(operator.FieldLast, field.TypeTime, value)
	}
	if ou.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.ChatTable,
			Columns: []string{operator.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedChatIDs(); len(nodes) > 0 && !ou.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.ChatTable,
			Columns: []string{operator.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.ChatTable,
			Columns: []string{operator.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GroupTable,
			Columns: []string{operator.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGroupIDs(); len(nodes) > 0 && !ou.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GroupTable,
			Columns: []string{operator.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GroupTable,
			Columns: []string{operator.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperatorUpdateOne is the builder for updating a single Operator entity.
type OperatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OperatorUpdateOne) SetUpdatedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OperatorUpdateOne) SetDeletedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableDeletedAt(t *time.Time) *OperatorUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OperatorUpdateOne) ClearDeletedAt() *OperatorUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetUsername sets the "username" field.
func (ouo *OperatorUpdateOne) SetUsername(s string) *OperatorUpdateOne {
	ouo.mutation.SetUsername(s)
	return ouo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableUsername(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetUsername(*s)
	}
	return ouo
}

// SetToken sets the "token" field.
func (ouo *OperatorUpdateOne) SetToken(s string) *OperatorUpdateOne {
	ouo.mutation.SetToken(s)
	return ouo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableToken(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetToken(*s)
	}
	return ouo
}

// ClearToken clears the value of the "token" field.
func (ouo *OperatorUpdateOne) ClearToken() *OperatorUpdateOne {
	ouo.mutation.ClearToken()
	return ouo
}

// SetColor sets the "color" field.
func (ouo *OperatorUpdateOne) SetColor(u uint32) *OperatorUpdateOne {
	ouo.mutation.ResetColor()
	ouo.mutation.SetColor(u)
	return ouo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableColor(u *uint32) *OperatorUpdateOne {
	if u != nil {
		ouo.SetColor(*u)
	}
	return ouo
}

// AddColor adds u to the "color" field.
func (ouo *OperatorUpdateOne) AddColor(u int32) *OperatorUpdateOne {
	ouo.mutation.AddColor(u)
	return ouo
}

// SetLast sets the "last" field.
func (ouo *OperatorUpdateOne) SetLast(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetLast(t)
	return ouo
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableLast(t *time.Time) *OperatorUpdateOne {
	if t != nil {
		ouo.SetLast(*t)
	}
	return ouo
}

// AddChatIDs adds the "chat" edge to the Chat entity by IDs.
func (ouo *OperatorUpdateOne) AddChatIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddChatIDs(ids...)
	return ouo
}

// AddChat adds the "chat" edges to the Chat entity.
func (ouo *OperatorUpdateOne) AddChat(c ...*Chat) *OperatorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddChatIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (ouo *OperatorUpdateOne) AddGroupIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddGroupIDs(ids...)
	return ouo
}

// AddGroup adds the "group" edges to the Group entity.
func (ouo *OperatorUpdateOne) AddGroup(g ...*Group) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGroupIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ouo *OperatorUpdateOne) Mutation() *OperatorMutation {
	return ouo.mutation
}

// ClearChat clears all "chat" edges to the Chat entity.
func (ouo *OperatorUpdateOne) ClearChat() *OperatorUpdateOne {
	ouo.mutation.ClearChat()
	return ouo
}

// RemoveChatIDs removes the "chat" edge to Chat entities by IDs.
func (ouo *OperatorUpdateOne) RemoveChatIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveChatIDs(ids...)
	return ouo
}

// RemoveChat removes "chat" edges to Chat entities.
func (ouo *OperatorUpdateOne) RemoveChat(c ...*Chat) *OperatorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveChatIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (ouo *OperatorUpdateOne) ClearGroup() *OperatorUpdateOne {
	ouo.mutation.ClearGroup()
	return ouo
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (ouo *OperatorUpdateOne) RemoveGroupIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveGroupIDs(ids...)
	return ouo
}

// RemoveGroup removes "group" edges to Group entities.
func (ouo *OperatorUpdateOne) RemoveGroup(g ...*Group) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ouo *OperatorUpdateOne) Where(ps ...predicate.Operator) *OperatorUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperatorUpdateOne) Select(field string, fields ...string) *OperatorUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operator entity.
func (ouo *OperatorUpdateOne) Save(ctx context.Context) (*Operator, error) {
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperatorUpdateOne) SaveX(ctx context.Context) *Operator {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperatorUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperatorUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OperatorUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		if operator.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized operator.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := operator.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OperatorUpdateOne) check() error {
	if v, ok := ouo.mutation.Username(); ok {
		if err := operator.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Operator.username": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Token(); ok {
		if err := operator.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Operator.token": %w`, err)}
		}
	}
	return nil
}

func (ouo *OperatorUpdateOne) sqlSave(ctx context.Context) (_node *Operator, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operator.FieldID)
		for _, f := range fields {
			if !operator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(operator.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(operator.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(operator.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Username(); ok {
		_spec.SetField(operator.FieldUsername, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Token(); ok {
		_spec.SetField(operator.FieldToken, field.TypeString, value)
	}
	if ouo.mutation.TokenCleared() {
		_spec.ClearField(operator.FieldToken, field.TypeString)
	}
	if value, ok := ouo.mutation.Color(); ok {
		_spec.SetField(operator.FieldColor, field.TypeUint32, value)
	}
	if value, ok := ouo.mutation.AddedColor(); ok {
		_spec.AddField(operator.FieldColor, field.TypeUint32, value)
	}
	if value, ok := ouo.mutation.Last(); ok {
		_spec.SetField(operator.FieldLast, field.TypeTime, value)
	}
	if ouo.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.ChatTable,
			Columns: []string{operator.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedChatIDs(); len(nodes) > 0 && !ouo.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.ChatTable,
			Columns: []string{operator.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.ChatTable,
			Columns: []string{operator.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GroupTable,
			Columns: []string{operator.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGroupIDs(); len(nodes) > 0 && !ouo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GroupTable,
			Columns: []string{operator.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GroupTable,
			Columns: []string{operator.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operator{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
