// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2msrv/internal/ent/credential"
)

// CredentialCreate is the builder for creating a Credential entity.
type CredentialCreate struct {
	config
	mutation *CredentialMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *CredentialCreate) SetCreatedAt(t time.Time) *CredentialCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableCreatedAt(t *time.Time) *CredentialCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CredentialCreate) SetUpdatedAt(t time.Time) *CredentialCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableUpdatedAt(t *time.Time) *CredentialCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CredentialCreate) SetDeletedAt(t time.Time) *CredentialCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableDeletedAt(t *time.Time) *CredentialCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetUsername sets the "username" field.
func (cc *CredentialCreate) SetUsername(s string) *CredentialCreate {
	cc.mutation.SetUsername(s)
	return cc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableUsername(s *string) *CredentialCreate {
	if s != nil {
		cc.SetUsername(*s)
	}
	return cc
}

// SetSecret sets the "secret" field.
func (cc *CredentialCreate) SetSecret(s string) *CredentialCreate {
	cc.mutation.SetSecret(s)
	return cc
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableSecret(s *string) *CredentialCreate {
	if s != nil {
		cc.SetSecret(*s)
	}
	return cc
}

// SetRealm sets the "realm" field.
func (cc *CredentialCreate) SetRealm(s string) *CredentialCreate {
	cc.mutation.SetRealm(s)
	return cc
}

// SetNillableRealm sets the "realm" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableRealm(s *string) *CredentialCreate {
	if s != nil {
		cc.SetRealm(*s)
	}
	return cc
}

// SetHost sets the "host" field.
func (cc *CredentialCreate) SetHost(s string) *CredentialCreate {
	cc.mutation.SetHost(s)
	return cc
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableHost(s *string) *CredentialCreate {
	if s != nil {
		cc.SetHost(*s)
	}
	return cc
}

// SetNote sets the "note" field.
func (cc *CredentialCreate) SetNote(s string) *CredentialCreate {
	cc.mutation.SetNote(s)
	return cc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableNote(s *string) *CredentialCreate {
	if s != nil {
		cc.SetNote(*s)
	}
	return cc
}

// SetColor sets the "color" field.
func (cc *CredentialCreate) SetColor(u uint32) *CredentialCreate {
	cc.mutation.SetColor(u)
	return cc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableColor(u *uint32) *CredentialCreate {
	if u != nil {
		cc.SetColor(*u)
	}
	return cc
}

// Mutation returns the CredentialMutation object of the builder.
func (cc *CredentialCreate) Mutation() *CredentialMutation {
	return cc.mutation
}

// Save creates the Credential in the database.
func (cc *CredentialCreate) Save(ctx context.Context) (*Credential, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CredentialCreate) SaveX(ctx context.Context) *Credential {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CredentialCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CredentialCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CredentialCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if credential.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized credential.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := credential.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if credential.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized credential.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := credential.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Color(); !ok {
		v := credential.DefaultColor
		cc.mutation.SetColor(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CredentialCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Credential.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Credential.updated_at"`)}
	}
	if v, ok := cc.mutation.Username(); ok {
		if err := credential.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Credential.username": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Secret(); ok {
		if err := credential.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Credential.secret": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Realm(); ok {
		if err := credential.RealmValidator(v); err != nil {
			return &ValidationError{Name: "realm", err: fmt.Errorf(`ent: validator failed for field "Credential.realm": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Host(); ok {
		if err := credential.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Credential.host": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Note(); ok {
		if err := credential.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Credential.note": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "Credential.color"`)}
	}
	return nil
}

func (cc *CredentialCreate) sqlSave(ctx context.Context) (*Credential, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CredentialCreate) createSpec() (*Credential, *sqlgraph.CreateSpec) {
	var (
		_node = &Credential{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(credential.Table, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(credential.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(credential.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(credential.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.Username(); ok {
		_spec.SetField(credential.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := cc.mutation.Secret(); ok {
		_spec.SetField(credential.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := cc.mutation.Realm(); ok {
		_spec.SetField(credential.FieldRealm, field.TypeString, value)
		_node.Realm = value
	}
	if value, ok := cc.mutation.Host(); ok {
		_spec.SetField(credential.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := cc.mutation.Note(); ok {
		_spec.SetField(credential.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := cc.mutation.Color(); ok {
		_spec.SetField(credential.FieldColor, field.TypeUint32, value)
		_node.Color = value
	}
	return _node, _spec
}

// CredentialCreateBulk is the builder for creating many Credential entities in bulk.
type CredentialCreateBulk struct {
	config
	err      error
	builders []*CredentialCreate
}

// Save creates the Credential entities in the database.
func (ccb *CredentialCreateBulk) Save(ctx context.Context) ([]*Credential, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Credential, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CredentialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CredentialCreateBulk) SaveX(ctx context.Context) []*Credential {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CredentialCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CredentialCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
