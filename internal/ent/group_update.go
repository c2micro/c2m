// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2m/internal/ent/beacon"
	"github.com/c2micro/c2m/internal/ent/group"
	"github.com/c2micro/c2m/internal/ent/message"
	"github.com/c2micro/c2m/internal/ent/operator"
	"github.com/c2micro/c2m/internal/ent/predicate"
	"github.com/c2micro/c2m/internal/ent/task"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetBid sets the "bid" field.
func (gu *GroupUpdate) SetBid(i int) *GroupUpdate {
	gu.mutation.SetBid(i)
	return gu
}

// SetNillableBid sets the "bid" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableBid(i *int) *GroupUpdate {
	if i != nil {
		gu.SetBid(*i)
	}
	return gu
}

// SetCmd sets the "cmd" field.
func (gu *GroupUpdate) SetCmd(s string) *GroupUpdate {
	gu.mutation.SetCmd(s)
	return gu
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableCmd(s *string) *GroupUpdate {
	if s != nil {
		gu.SetCmd(*s)
	}
	return gu
}

// SetVisible sets the "visible" field.
func (gu *GroupUpdate) SetVisible(b bool) *GroupUpdate {
	gu.mutation.SetVisible(b)
	return gu
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableVisible(b *bool) *GroupUpdate {
	if b != nil {
		gu.SetVisible(*b)
	}
	return gu
}

// SetAuthor sets the "author" field.
func (gu *GroupUpdate) SetAuthor(i int) *GroupUpdate {
	gu.mutation.SetAuthor(i)
	return gu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableAuthor(i *int) *GroupUpdate {
	if i != nil {
		gu.SetAuthor(*i)
	}
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GroupUpdate) SetCreatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableCreatedAt(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetClosedAt sets the "closed_at" field.
func (gu *GroupUpdate) SetClosedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetClosedAt(t)
	return gu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableClosedAt(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetClosedAt(*t)
	}
	return gu
}

// ClearClosedAt clears the value of the "closed_at" field.
func (gu *GroupUpdate) ClearClosedAt() *GroupUpdate {
	gu.mutation.ClearClosedAt()
	return gu
}

// SetBeaconID sets the "beacon" edge to the Beacon entity by ID.
func (gu *GroupUpdate) SetBeaconID(id int) *GroupUpdate {
	gu.mutation.SetBeaconID(id)
	return gu
}

// SetBeacon sets the "beacon" edge to the Beacon entity.
func (gu *GroupUpdate) SetBeacon(b *Beacon) *GroupUpdate {
	return gu.SetBeaconID(b.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gu *GroupUpdate) SetOperatorID(id int) *GroupUpdate {
	gu.mutation.SetOperatorID(id)
	return gu
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gu *GroupUpdate) SetOperator(o *Operator) *GroupUpdate {
	return gu.SetOperatorID(o.ID)
}

// AddMessageIDs adds the "message" edge to the Message entity by IDs.
func (gu *GroupUpdate) AddMessageIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddMessageIDs(ids...)
	return gu
}

// AddMessage adds the "message" edges to the Message entity.
func (gu *GroupUpdate) AddMessage(m ...*Message) *GroupUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.AddMessageIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (gu *GroupUpdate) AddTaskIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddTaskIDs(ids...)
	return gu
}

// AddTask adds the "task" edges to the Task entity.
func (gu *GroupUpdate) AddTask(t ...*Task) *GroupUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.AddTaskIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearBeacon clears the "beacon" edge to the Beacon entity.
func (gu *GroupUpdate) ClearBeacon() *GroupUpdate {
	gu.mutation.ClearBeacon()
	return gu
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (gu *GroupUpdate) ClearOperator() *GroupUpdate {
	gu.mutation.ClearOperator()
	return gu
}

// ClearMessage clears all "message" edges to the Message entity.
func (gu *GroupUpdate) ClearMessage() *GroupUpdate {
	gu.mutation.ClearMessage()
	return gu
}

// RemoveMessageIDs removes the "message" edge to Message entities by IDs.
func (gu *GroupUpdate) RemoveMessageIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveMessageIDs(ids...)
	return gu
}

// RemoveMessage removes "message" edges to Message entities.
func (gu *GroupUpdate) RemoveMessage(m ...*Message) *GroupUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.RemoveMessageIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (gu *GroupUpdate) ClearTask() *GroupUpdate {
	gu.mutation.ClearTask()
	return gu
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (gu *GroupUpdate) RemoveTaskIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveTaskIDs(ids...)
	return gu
}

// RemoveTask removes "task" edges to Task entities.
func (gu *GroupUpdate) RemoveTask(t ...*Task) *GroupUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.Cmd(); ok {
		if err := group.CmdValidator(v); err != nil {
			return &ValidationError{Name: "cmd", err: fmt.Errorf(`ent: validator failed for field "Group.cmd": %w`, err)}
		}
	}
	if gu.mutation.BeaconCleared() && len(gu.mutation.BeaconIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.beacon"`)
	}
	if gu.mutation.OperatorCleared() && len(gu.mutation.OperatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.operator"`)
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Cmd(); ok {
		_spec.SetField(group.FieldCmd, field.TypeString, value)
	}
	if value, ok := gu.mutation.Visible(); ok {
		_spec.SetField(group.FieldVisible, field.TypeBool, value)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(group.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.ClosedAt(); ok {
		_spec.SetField(group.FieldClosedAt, field.TypeTime, value)
	}
	if gu.mutation.ClosedAtCleared() {
		_spec.ClearField(group.FieldClosedAt, field.TypeTime)
	}
	if gu.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.BeaconTable,
			Columns: []string{group.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.BeaconTable,
			Columns: []string{group.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OperatorTable,
			Columns: []string{group.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OperatorTable,
			Columns: []string{group.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MessageTable,
			Columns: []string{group.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedMessageIDs(); len(nodes) > 0 && !gu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MessageTable,
			Columns: []string{group.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MessageTable,
			Columns: []string{group.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TaskTable,
			Columns: []string{group.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !gu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TaskTable,
			Columns: []string{group.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TaskTable,
			Columns: []string{group.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetBid sets the "bid" field.
func (guo *GroupUpdateOne) SetBid(i int) *GroupUpdateOne {
	guo.mutation.SetBid(i)
	return guo
}

// SetNillableBid sets the "bid" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableBid(i *int) *GroupUpdateOne {
	if i != nil {
		guo.SetBid(*i)
	}
	return guo
}

// SetCmd sets the "cmd" field.
func (guo *GroupUpdateOne) SetCmd(s string) *GroupUpdateOne {
	guo.mutation.SetCmd(s)
	return guo
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableCmd(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetCmd(*s)
	}
	return guo
}

// SetVisible sets the "visible" field.
func (guo *GroupUpdateOne) SetVisible(b bool) *GroupUpdateOne {
	guo.mutation.SetVisible(b)
	return guo
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableVisible(b *bool) *GroupUpdateOne {
	if b != nil {
		guo.SetVisible(*b)
	}
	return guo
}

// SetAuthor sets the "author" field.
func (guo *GroupUpdateOne) SetAuthor(i int) *GroupUpdateOne {
	guo.mutation.SetAuthor(i)
	return guo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableAuthor(i *int) *GroupUpdateOne {
	if i != nil {
		guo.SetAuthor(*i)
	}
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GroupUpdateOne) SetCreatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableCreatedAt(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetClosedAt sets the "closed_at" field.
func (guo *GroupUpdateOne) SetClosedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetClosedAt(t)
	return guo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableClosedAt(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetClosedAt(*t)
	}
	return guo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (guo *GroupUpdateOne) ClearClosedAt() *GroupUpdateOne {
	guo.mutation.ClearClosedAt()
	return guo
}

// SetBeaconID sets the "beacon" edge to the Beacon entity by ID.
func (guo *GroupUpdateOne) SetBeaconID(id int) *GroupUpdateOne {
	guo.mutation.SetBeaconID(id)
	return guo
}

// SetBeacon sets the "beacon" edge to the Beacon entity.
func (guo *GroupUpdateOne) SetBeacon(b *Beacon) *GroupUpdateOne {
	return guo.SetBeaconID(b.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (guo *GroupUpdateOne) SetOperatorID(id int) *GroupUpdateOne {
	guo.mutation.SetOperatorID(id)
	return guo
}

// SetOperator sets the "operator" edge to the Operator entity.
func (guo *GroupUpdateOne) SetOperator(o *Operator) *GroupUpdateOne {
	return guo.SetOperatorID(o.ID)
}

// AddMessageIDs adds the "message" edge to the Message entity by IDs.
func (guo *GroupUpdateOne) AddMessageIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddMessageIDs(ids...)
	return guo
}

// AddMessage adds the "message" edges to the Message entity.
func (guo *GroupUpdateOne) AddMessage(m ...*Message) *GroupUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.AddMessageIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (guo *GroupUpdateOne) AddTaskIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddTaskIDs(ids...)
	return guo
}

// AddTask adds the "task" edges to the Task entity.
func (guo *GroupUpdateOne) AddTask(t ...*Task) *GroupUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.AddTaskIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearBeacon clears the "beacon" edge to the Beacon entity.
func (guo *GroupUpdateOne) ClearBeacon() *GroupUpdateOne {
	guo.mutation.ClearBeacon()
	return guo
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (guo *GroupUpdateOne) ClearOperator() *GroupUpdateOne {
	guo.mutation.ClearOperator()
	return guo
}

// ClearMessage clears all "message" edges to the Message entity.
func (guo *GroupUpdateOne) ClearMessage() *GroupUpdateOne {
	guo.mutation.ClearMessage()
	return guo
}

// RemoveMessageIDs removes the "message" edge to Message entities by IDs.
func (guo *GroupUpdateOne) RemoveMessageIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveMessageIDs(ids...)
	return guo
}

// RemoveMessage removes "message" edges to Message entities.
func (guo *GroupUpdateOne) RemoveMessage(m ...*Message) *GroupUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.RemoveMessageIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (guo *GroupUpdateOne) ClearTask() *GroupUpdateOne {
	guo.mutation.ClearTask()
	return guo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (guo *GroupUpdateOne) RemoveTaskIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveTaskIDs(ids...)
	return guo
}

// RemoveTask removes "task" edges to Task entities.
func (guo *GroupUpdateOne) RemoveTask(t ...*Task) *GroupUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.Cmd(); ok {
		if err := group.CmdValidator(v); err != nil {
			return &ValidationError{Name: "cmd", err: fmt.Errorf(`ent: validator failed for field "Group.cmd": %w`, err)}
		}
	}
	if guo.mutation.BeaconCleared() && len(guo.mutation.BeaconIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.beacon"`)
	}
	if guo.mutation.OperatorCleared() && len(guo.mutation.OperatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.operator"`)
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Cmd(); ok {
		_spec.SetField(group.FieldCmd, field.TypeString, value)
	}
	if value, ok := guo.mutation.Visible(); ok {
		_spec.SetField(group.FieldVisible, field.TypeBool, value)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(group.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.ClosedAt(); ok {
		_spec.SetField(group.FieldClosedAt, field.TypeTime, value)
	}
	if guo.mutation.ClosedAtCleared() {
		_spec.ClearField(group.FieldClosedAt, field.TypeTime)
	}
	if guo.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.BeaconTable,
			Columns: []string{group.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.BeaconTable,
			Columns: []string{group.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OperatorTable,
			Columns: []string{group.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OperatorTable,
			Columns: []string{group.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MessageTable,
			Columns: []string{group.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedMessageIDs(); len(nodes) > 0 && !guo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MessageTable,
			Columns: []string{group.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MessageTable,
			Columns: []string{group.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TaskTable,
			Columns: []string{group.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !guo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TaskTable,
			Columns: []string{group.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TaskTable,
			Columns: []string{group.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
