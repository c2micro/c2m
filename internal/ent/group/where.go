// Code generated by ent, DO NOT EDIT.

package group

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/c2micro/c2msrv/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldID, id))
}

// Bid applies equality check predicate on the "bid" field. It's identical to BidEQ.
func Bid(v int) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldBid, v))
}

// Cmd applies equality check predicate on the "cmd" field. It's identical to CmdEQ.
func Cmd(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCmd, v))
}

// Visible applies equality check predicate on the "visible" field. It's identical to VisibleEQ.
func Visible(v bool) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldVisible, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v int) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldAuthor, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCreatedAt, v))
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldClosedAt, v))
}

// BidEQ applies the EQ predicate on the "bid" field.
func BidEQ(v int) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldBid, v))
}

// BidNEQ applies the NEQ predicate on the "bid" field.
func BidNEQ(v int) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldBid, v))
}

// BidIn applies the In predicate on the "bid" field.
func BidIn(vs ...int) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldBid, vs...))
}

// BidNotIn applies the NotIn predicate on the "bid" field.
func BidNotIn(vs ...int) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldBid, vs...))
}

// CmdEQ applies the EQ predicate on the "cmd" field.
func CmdEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCmd, v))
}

// CmdNEQ applies the NEQ predicate on the "cmd" field.
func CmdNEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldCmd, v))
}

// CmdIn applies the In predicate on the "cmd" field.
func CmdIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldCmd, vs...))
}

// CmdNotIn applies the NotIn predicate on the "cmd" field.
func CmdNotIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldCmd, vs...))
}

// CmdGT applies the GT predicate on the "cmd" field.
func CmdGT(v string) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldCmd, v))
}

// CmdGTE applies the GTE predicate on the "cmd" field.
func CmdGTE(v string) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldCmd, v))
}

// CmdLT applies the LT predicate on the "cmd" field.
func CmdLT(v string) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldCmd, v))
}

// CmdLTE applies the LTE predicate on the "cmd" field.
func CmdLTE(v string) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldCmd, v))
}

// CmdContains applies the Contains predicate on the "cmd" field.
func CmdContains(v string) predicate.Group {
	return predicate.Group(sql.FieldContains(FieldCmd, v))
}

// CmdHasPrefix applies the HasPrefix predicate on the "cmd" field.
func CmdHasPrefix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasPrefix(FieldCmd, v))
}

// CmdHasSuffix applies the HasSuffix predicate on the "cmd" field.
func CmdHasSuffix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasSuffix(FieldCmd, v))
}

// CmdEqualFold applies the EqualFold predicate on the "cmd" field.
func CmdEqualFold(v string) predicate.Group {
	return predicate.Group(sql.FieldEqualFold(FieldCmd, v))
}

// CmdContainsFold applies the ContainsFold predicate on the "cmd" field.
func CmdContainsFold(v string) predicate.Group {
	return predicate.Group(sql.FieldContainsFold(FieldCmd, v))
}

// VisibleEQ applies the EQ predicate on the "visible" field.
func VisibleEQ(v bool) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldVisible, v))
}

// VisibleNEQ applies the NEQ predicate on the "visible" field.
func VisibleNEQ(v bool) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldVisible, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v int) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v int) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...int) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...int) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldAuthor, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldCreatedAt, v))
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldClosedAt, v))
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldClosedAt, v))
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldClosedAt, vs...))
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldClosedAt, vs...))
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldClosedAt, v))
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldClosedAt, v))
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldClosedAt, v))
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldClosedAt, v))
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.Group {
	return predicate.Group(sql.FieldIsNull(FieldClosedAt))
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.Group {
	return predicate.Group(sql.FieldNotNull(FieldClosedAt))
}

// HasBeacon applies the HasEdge predicate on the "beacon" edge.
func HasBeacon() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BeaconTable, BeaconColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBeaconWith applies the HasEdge predicate on the "beacon" edge with a given conditions (other predicates).
func HasBeaconWith(preds ...predicate.Beacon) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newBeaconStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperator applies the HasEdge predicate on the "operator" edge.
func HasOperator() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.Operator) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newMessageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Group) predicate.Group {
	return predicate.Group(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Group) predicate.Group {
	return predicate.Group(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Group) predicate.Group {
	return predicate.Group(sql.NotPredicates(p))
}
