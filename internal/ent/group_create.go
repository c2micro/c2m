// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2msrv/internal/ent/beacon"
	"github.com/c2micro/c2msrv/internal/ent/group"
	"github.com/c2micro/c2msrv/internal/ent/message"
	"github.com/c2micro/c2msrv/internal/ent/operator"
	"github.com/c2micro/c2msrv/internal/ent/task"
)

// GroupCreate is the builder for creating a Group entity.
type GroupCreate struct {
	config
	mutation *GroupMutation
	hooks    []Hook
}

// SetBid sets the "bid" field.
func (gc *GroupCreate) SetBid(i int) *GroupCreate {
	gc.mutation.SetBid(i)
	return gc
}

// SetCmd sets the "cmd" field.
func (gc *GroupCreate) SetCmd(s string) *GroupCreate {
	gc.mutation.SetCmd(s)
	return gc
}

// SetVisible sets the "visible" field.
func (gc *GroupCreate) SetVisible(b bool) *GroupCreate {
	gc.mutation.SetVisible(b)
	return gc
}

// SetAuthor sets the "author" field.
func (gc *GroupCreate) SetAuthor(i int) *GroupCreate {
	gc.mutation.SetAuthor(i)
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GroupCreate) SetCreatedAt(t time.Time) *GroupCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GroupCreate) SetNillableCreatedAt(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetClosedAt sets the "closed_at" field.
func (gc *GroupCreate) SetClosedAt(t time.Time) *GroupCreate {
	gc.mutation.SetClosedAt(t)
	return gc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (gc *GroupCreate) SetNillableClosedAt(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetClosedAt(*t)
	}
	return gc
}

// SetBeaconID sets the "beacon" edge to the Beacon entity by ID.
func (gc *GroupCreate) SetBeaconID(id int) *GroupCreate {
	gc.mutation.SetBeaconID(id)
	return gc
}

// SetBeacon sets the "beacon" edge to the Beacon entity.
func (gc *GroupCreate) SetBeacon(b *Beacon) *GroupCreate {
	return gc.SetBeaconID(b.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gc *GroupCreate) SetOperatorID(id int) *GroupCreate {
	gc.mutation.SetOperatorID(id)
	return gc
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gc *GroupCreate) SetOperator(o *Operator) *GroupCreate {
	return gc.SetOperatorID(o.ID)
}

// AddMessageIDs adds the "message" edge to the Message entity by IDs.
func (gc *GroupCreate) AddMessageIDs(ids ...int) *GroupCreate {
	gc.mutation.AddMessageIDs(ids...)
	return gc
}

// AddMessage adds the "message" edges to the Message entity.
func (gc *GroupCreate) AddMessage(m ...*Message) *GroupCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gc.AddMessageIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (gc *GroupCreate) AddTaskIDs(ids ...int) *GroupCreate {
	gc.mutation.AddTaskIDs(ids...)
	return gc
}

// AddTask adds the "task" edges to the Task entity.
func (gc *GroupCreate) AddTask(t ...*Task) *GroupCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gc.AddTaskIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gc *GroupCreate) Mutation() *GroupMutation {
	return gc.mutation
}

// Save creates the Group in the database.
func (gc *GroupCreate) Save(ctx context.Context) (*Group, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupCreate) SaveX(ctx context.Context) *Group {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupCreate) defaults() {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := group.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupCreate) check() error {
	if _, ok := gc.mutation.Bid(); !ok {
		return &ValidationError{Name: "bid", err: errors.New(`ent: missing required field "Group.bid"`)}
	}
	if _, ok := gc.mutation.Cmd(); !ok {
		return &ValidationError{Name: "cmd", err: errors.New(`ent: missing required field "Group.cmd"`)}
	}
	if v, ok := gc.mutation.Cmd(); ok {
		if err := group.CmdValidator(v); err != nil {
			return &ValidationError{Name: "cmd", err: fmt.Errorf(`ent: validator failed for field "Group.cmd": %w`, err)}
		}
	}
	if _, ok := gc.mutation.Visible(); !ok {
		return &ValidationError{Name: "visible", err: errors.New(`ent: missing required field "Group.visible"`)}
	}
	if _, ok := gc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Group.author"`)}
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Group.created_at"`)}
	}
	if len(gc.mutation.BeaconIDs()) == 0 {
		return &ValidationError{Name: "beacon", err: errors.New(`ent: missing required edge "Group.beacon"`)}
	}
	if len(gc.mutation.OperatorIDs()) == 0 {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required edge "Group.operator"`)}
	}
	return nil
}

func (gc *GroupCreate) sqlSave(ctx context.Context) (*Group, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GroupCreate) createSpec() (*Group, *sqlgraph.CreateSpec) {
	var (
		_node = &Group{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(group.Table, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Cmd(); ok {
		_spec.SetField(group.FieldCmd, field.TypeString, value)
		_node.Cmd = value
	}
	if value, ok := gc.mutation.Visible(); ok {
		_spec.SetField(group.FieldVisible, field.TypeBool, value)
		_node.Visible = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(group.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.ClosedAt(); ok {
		_spec.SetField(group.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if nodes := gc.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.BeaconTable,
			Columns: []string{group.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Bid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OperatorTable,
			Columns: []string{group.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Author = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MessageTable,
			Columns: []string{group.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TaskTable,
			Columns: []string{group.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupCreateBulk is the builder for creating many Group entities in bulk.
type GroupCreateBulk struct {
	config
	err      error
	builders []*GroupCreate
}

// Save creates the Group entities in the database.
func (gcb *GroupCreateBulk) Save(ctx context.Context) ([]*Group, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Group, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupCreateBulk) SaveX(ctx context.Context) []*Group {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
