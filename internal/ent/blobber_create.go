// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2msrv/internal/ent/blobber"
	"github.com/c2micro/c2msrv/internal/ent/task"
)

// BlobberCreate is the builder for creating a Blobber entity.
type BlobberCreate struct {
	config
	mutation *BlobberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BlobberCreate) SetCreatedAt(t time.Time) *BlobberCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BlobberCreate) SetNillableCreatedAt(t *time.Time) *BlobberCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BlobberCreate) SetUpdatedAt(t time.Time) *BlobberCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BlobberCreate) SetNillableUpdatedAt(t *time.Time) *BlobberCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BlobberCreate) SetDeletedAt(t time.Time) *BlobberCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BlobberCreate) SetNillableDeletedAt(t *time.Time) *BlobberCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetHash sets the "hash" field.
func (bc *BlobberCreate) SetHash(b []byte) *BlobberCreate {
	bc.mutation.SetHash(b)
	return bc
}

// SetBlob sets the "blob" field.
func (bc *BlobberCreate) SetBlob(b []byte) *BlobberCreate {
	bc.mutation.SetBlob(b)
	return bc
}

// SetSize sets the "size" field.
func (bc *BlobberCreate) SetSize(i int) *BlobberCreate {
	bc.mutation.SetSize(i)
	return bc
}

// AddTaskArgIDs adds the "task_args" edge to the Task entity by IDs.
func (bc *BlobberCreate) AddTaskArgIDs(ids ...int) *BlobberCreate {
	bc.mutation.AddTaskArgIDs(ids...)
	return bc
}

// AddTaskArgs adds the "task_args" edges to the Task entity.
func (bc *BlobberCreate) AddTaskArgs(t ...*Task) *BlobberCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddTaskArgIDs(ids...)
}

// AddTaskOutputIDs adds the "task_output" edge to the Task entity by IDs.
func (bc *BlobberCreate) AddTaskOutputIDs(ids ...int) *BlobberCreate {
	bc.mutation.AddTaskOutputIDs(ids...)
	return bc
}

// AddTaskOutput adds the "task_output" edges to the Task entity.
func (bc *BlobberCreate) AddTaskOutput(t ...*Task) *BlobberCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddTaskOutputIDs(ids...)
}

// Mutation returns the BlobberMutation object of the builder.
func (bc *BlobberCreate) Mutation() *BlobberMutation {
	return bc.mutation
}

// Save creates the Blobber in the database.
func (bc *BlobberCreate) Save(ctx context.Context) (*Blobber, error) {
	if err := bc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlobberCreate) SaveX(ctx context.Context) *Blobber {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BlobberCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BlobberCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BlobberCreate) defaults() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		if blobber.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized blobber.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := blobber.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		if blobber.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blobber.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blobber.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlobberCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Blobber.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Blobber.updated_at"`)}
	}
	if _, ok := bc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Blobber.hash"`)}
	}
	if _, ok := bc.mutation.Blob(); !ok {
		return &ValidationError{Name: "blob", err: errors.New(`ent: missing required field "Blobber.blob"`)}
	}
	if _, ok := bc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Blobber.size"`)}
	}
	return nil
}

func (bc *BlobberCreate) sqlSave(ctx context.Context) (*Blobber, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BlobberCreate) createSpec() (*Blobber, *sqlgraph.CreateSpec) {
	var (
		_node = &Blobber{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(blobber.Table, sqlgraph.NewFieldSpec(blobber.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(blobber.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(blobber.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(blobber.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := bc.mutation.Hash(); ok {
		_spec.SetField(blobber.FieldHash, field.TypeBytes, value)
		_node.Hash = value
	}
	if value, ok := bc.mutation.Blob(); ok {
		_spec.SetField(blobber.FieldBlob, field.TypeBytes, value)
		_node.Blob = value
	}
	if value, ok := bc.mutation.Size(); ok {
		_spec.SetField(blobber.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if nodes := bc.mutation.TaskArgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskArgsTable,
			Columns: []string{blobber.TaskArgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TaskOutputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskOutputTable,
			Columns: []string{blobber.TaskOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlobberCreateBulk is the builder for creating many Blobber entities in bulk.
type BlobberCreateBulk struct {
	config
	err      error
	builders []*BlobberCreate
}

// Save creates the Blobber entities in the database.
func (bcb *BlobberCreateBulk) Save(ctx context.Context) ([]*Blobber, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Blobber, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlobberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BlobberCreateBulk) SaveX(ctx context.Context) []*Blobber {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BlobberCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BlobberCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
