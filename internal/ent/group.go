// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/c2micro/c2msrv/internal/ent/beacon"
	"github.com/c2micro/c2msrv/internal/ent/group"
	"github.com/c2micro/c2msrv/internal/ent/operator"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// beacon ID
	Bid int `json:"bid,omitempty"`
	// command with arguments
	Cmd string `json:"cmd,omitempty"`
	// is group visible for other operators
	Visible bool `json:"visible,omitempty"`
	// author of group
	Author int `json:"author,omitempty"`
	// when group created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// when group closed
	ClosedAt time.Time `json:"closed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupQuery when eager-loading is set.
	Edges        GroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GroupEdges holds the relations/edges for other nodes in the graph.
type GroupEdges struct {
	// Beacon holds the value of the beacon edge.
	Beacon *Beacon `json:"beacon,omitempty"`
	// Operator holds the value of the operator edge.
	Operator *Operator `json:"operator,omitempty"`
	// Message holds the value of the message edge.
	Message []*Message `json:"message,omitempty"`
	// Task holds the value of the task edge.
	Task []*Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BeaconOrErr returns the Beacon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupEdges) BeaconOrErr() (*Beacon, error) {
	if e.Beacon != nil {
		return e.Beacon, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: beacon.Label}
	}
	return nil, &NotLoadedError{edge: "beacon"}
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupEdges) OperatorOrErr() (*Operator, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: operator.Label}
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) MessageOrErr() ([]*Message, error) {
	if e.loadedTypes[2] {
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[3] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case group.FieldVisible:
			values[i] = new(sql.NullBool)
		case group.FieldID, group.FieldBid, group.FieldAuthor:
			values[i] = new(sql.NullInt64)
		case group.FieldCmd:
			values[i] = new(sql.NullString)
		case group.FieldCreatedAt, group.FieldClosedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case group.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case group.FieldBid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bid", values[i])
			} else if value.Valid {
				gr.Bid = int(value.Int64)
			}
		case group.FieldCmd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cmd", values[i])
			} else if value.Valid {
				gr.Cmd = value.String
			}
		case group.FieldVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible", values[i])
			} else if value.Valid {
				gr.Visible = value.Bool
			}
		case group.FieldAuthor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				gr.Author = int(value.Int64)
			}
		case group.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case group.FieldClosedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[i])
			} else if value.Valid {
				gr.ClosedAt = value.Time
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Group.
// This includes values selected through modifiers, order, etc.
func (gr *Group) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryBeacon queries the "beacon" edge of the Group entity.
func (gr *Group) QueryBeacon() *BeaconQuery {
	return NewGroupClient(gr.config).QueryBeacon(gr)
}

// QueryOperator queries the "operator" edge of the Group entity.
func (gr *Group) QueryOperator() *OperatorQuery {
	return NewGroupClient(gr.config).QueryOperator(gr)
}

// QueryMessage queries the "message" edge of the Group entity.
func (gr *Group) QueryMessage() *MessageQuery {
	return NewGroupClient(gr.config).QueryMessage(gr)
}

// QueryTask queries the "task" edge of the Group entity.
func (gr *Group) QueryTask() *TaskQuery {
	return NewGroupClient(gr.config).QueryTask(gr)
}

// Update returns a builder for updating this Group.
// Note that you need to call Group.Unwrap() before calling this method if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return NewGroupClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the Group entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Group is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("bid=")
	builder.WriteString(fmt.Sprintf("%v", gr.Bid))
	builder.WriteString(", ")
	builder.WriteString("cmd=")
	builder.WriteString(gr.Cmd)
	builder.WriteString(", ")
	builder.WriteString("visible=")
	builder.WriteString(fmt.Sprintf("%v", gr.Visible))
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", gr.Author))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(gr.ClosedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Groups is a parsable slice of Group.
type Groups []*Group
