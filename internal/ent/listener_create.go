// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2m/internal/ent/beacon"
	"github.com/c2micro/c2m/internal/ent/listener"
	"github.com/c2micro/c2m/internal/types"
)

// ListenerCreate is the builder for creating a Listener entity.
type ListenerCreate struct {
	config
	mutation *ListenerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lc *ListenerCreate) SetCreatedAt(t time.Time) *ListenerCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableCreatedAt(t *time.Time) *ListenerCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *ListenerCreate) SetUpdatedAt(t time.Time) *ListenerCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableUpdatedAt(t *time.Time) *ListenerCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetDeletedAt sets the "deleted_at" field.
func (lc *ListenerCreate) SetDeletedAt(t time.Time) *ListenerCreate {
	lc.mutation.SetDeletedAt(t)
	return lc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableDeletedAt(t *time.Time) *ListenerCreate {
	if t != nil {
		lc.SetDeletedAt(*t)
	}
	return lc
}

// SetToken sets the "token" field.
func (lc *ListenerCreate) SetToken(s string) *ListenerCreate {
	lc.mutation.SetToken(s)
	return lc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableToken(s *string) *ListenerCreate {
	if s != nil {
		lc.SetToken(*s)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *ListenerCreate) SetName(s string) *ListenerCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableName(s *string) *ListenerCreate {
	if s != nil {
		lc.SetName(*s)
	}
	return lc
}

// SetIP sets the "ip" field.
func (lc *ListenerCreate) SetIP(t types.Inet) *ListenerCreate {
	lc.mutation.SetIP(t)
	return lc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableIP(t *types.Inet) *ListenerCreate {
	if t != nil {
		lc.SetIP(*t)
	}
	return lc
}

// SetPort sets the "port" field.
func (lc *ListenerCreate) SetPort(u uint16) *ListenerCreate {
	lc.mutation.SetPort(u)
	return lc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (lc *ListenerCreate) SetNillablePort(u *uint16) *ListenerCreate {
	if u != nil {
		lc.SetPort(*u)
	}
	return lc
}

// SetColor sets the "color" field.
func (lc *ListenerCreate) SetColor(u uint32) *ListenerCreate {
	lc.mutation.SetColor(u)
	return lc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableColor(u *uint32) *ListenerCreate {
	if u != nil {
		lc.SetColor(*u)
	}
	return lc
}

// SetNote sets the "note" field.
func (lc *ListenerCreate) SetNote(s string) *ListenerCreate {
	lc.mutation.SetNote(s)
	return lc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableNote(s *string) *ListenerCreate {
	if s != nil {
		lc.SetNote(*s)
	}
	return lc
}

// SetLast sets the "last" field.
func (lc *ListenerCreate) SetLast(t time.Time) *ListenerCreate {
	lc.mutation.SetLast(t)
	return lc
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (lc *ListenerCreate) SetNillableLast(t *time.Time) *ListenerCreate {
	if t != nil {
		lc.SetLast(*t)
	}
	return lc
}

// AddBeaconIDs adds the "beacon" edge to the Beacon entity by IDs.
func (lc *ListenerCreate) AddBeaconIDs(ids ...int) *ListenerCreate {
	lc.mutation.AddBeaconIDs(ids...)
	return lc
}

// AddBeacon adds the "beacon" edges to the Beacon entity.
func (lc *ListenerCreate) AddBeacon(b ...*Beacon) *ListenerCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lc.AddBeaconIDs(ids...)
}

// Mutation returns the ListenerMutation object of the builder.
func (lc *ListenerCreate) Mutation() *ListenerMutation {
	return lc.mutation
}

// Save creates the Listener in the database.
func (lc *ListenerCreate) Save(ctx context.Context) (*Listener, error) {
	if err := lc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *ListenerCreate) SaveX(ctx context.Context) *Listener {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *ListenerCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *ListenerCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *ListenerCreate) defaults() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		if listener.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized listener.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := listener.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		if listener.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized listener.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := listener.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.Color(); !ok {
		v := listener.DefaultColor
		lc.mutation.SetColor(v)
	}
	if _, ok := lc.mutation.Last(); !ok {
		if listener.DefaultLast == nil {
			return fmt.Errorf("ent: uninitialized listener.DefaultLast (forgotten import ent/runtime?)")
		}
		v := listener.DefaultLast()
		lc.mutation.SetLast(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lc *ListenerCreate) check() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Listener.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Listener.updated_at"`)}
	}
	if v, ok := lc.mutation.Token(); ok {
		if err := listener.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Listener.token": %w`, err)}
		}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := listener.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Listener.name": %w`, err)}
		}
	}
	if v, ok := lc.mutation.IP(); ok {
		if err := listener.IPValidator(v.String()); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Listener.ip": %w`, err)}
		}
	}
	if v, ok := lc.mutation.Port(); ok {
		if err := listener.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Listener.port": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "Listener.color"`)}
	}
	if v, ok := lc.mutation.Note(); ok {
		if err := listener.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Listener.note": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Last(); !ok {
		return &ValidationError{Name: "last", err: errors.New(`ent: missing required field "Listener.last"`)}
	}
	return nil
}

func (lc *ListenerCreate) sqlSave(ctx context.Context) (*Listener, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *ListenerCreate) createSpec() (*Listener, *sqlgraph.CreateSpec) {
	var (
		_node = &Listener{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(listener.Table, sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(listener.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(listener.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.DeletedAt(); ok {
		_spec.SetField(listener.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := lc.mutation.Token(); ok {
		_spec.SetField(listener.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(listener.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.IP(); ok {
		_spec.SetField(listener.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := lc.mutation.Port(); ok {
		_spec.SetField(listener.FieldPort, field.TypeUint16, value)
		_node.Port = value
	}
	if value, ok := lc.mutation.Color(); ok {
		_spec.SetField(listener.FieldColor, field.TypeUint32, value)
		_node.Color = value
	}
	if value, ok := lc.mutation.Note(); ok {
		_spec.SetField(listener.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := lc.mutation.Last(); ok {
		_spec.SetField(listener.FieldLast, field.TypeTime, value)
		_node.Last = value
	}
	if nodes := lc.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listener.BeaconTable,
			Columns: []string{listener.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ListenerCreateBulk is the builder for creating many Listener entities in bulk.
type ListenerCreateBulk struct {
	config
	err      error
	builders []*ListenerCreate
}

// Save creates the Listener entities in the database.
func (lcb *ListenerCreateBulk) Save(ctx context.Context) ([]*Listener, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Listener, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ListenerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *ListenerCreateBulk) SaveX(ctx context.Context) []*Listener {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *ListenerCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *ListenerCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
