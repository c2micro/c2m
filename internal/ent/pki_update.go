// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2m/internal/ent/pki"
	"github.com/c2micro/c2m/internal/ent/predicate"
)

// PkiUpdate is the builder for updating Pki entities.
type PkiUpdate struct {
	config
	hooks    []Hook
	mutation *PkiMutation
}

// Where appends a list predicates to the PkiUpdate builder.
func (pu *PkiUpdate) Where(ps ...predicate.Pki) *PkiUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PkiUpdate) SetUpdatedAt(t time.Time) *PkiUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PkiUpdate) SetDeletedAt(t time.Time) *PkiUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PkiUpdate) SetNillableDeletedAt(t *time.Time) *PkiUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PkiUpdate) ClearDeletedAt() *PkiUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetType sets the "type" field.
func (pu *PkiUpdate) SetType(pk pki.Type) *PkiUpdate {
	pu.mutation.SetType(pk)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PkiUpdate) SetNillableType(pk *pki.Type) *PkiUpdate {
	if pk != nil {
		pu.SetType(*pk)
	}
	return pu
}

// SetKey sets the "key" field.
func (pu *PkiUpdate) SetKey(b []byte) *PkiUpdate {
	pu.mutation.SetKey(b)
	return pu
}

// SetCert sets the "cert" field.
func (pu *PkiUpdate) SetCert(b []byte) *PkiUpdate {
	pu.mutation.SetCert(b)
	return pu
}

// Mutation returns the PkiMutation object of the builder.
func (pu *PkiUpdate) Mutation() *PkiMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PkiUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PkiUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PkiUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PkiUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PkiUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if pki.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pki.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pki.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PkiUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := pki.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pki.type": %w`, err)}
		}
	}
	return nil
}

func (pu *PkiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pki.Table, pki.Columns, sqlgraph.NewFieldSpec(pki.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(pki.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(pki.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(pki.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(pki.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Key(); ok {
		_spec.SetField(pki.FieldKey, field.TypeBytes, value)
	}
	if value, ok := pu.mutation.Cert(); ok {
		_spec.SetField(pki.FieldCert, field.TypeBytes, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pki.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PkiUpdateOne is the builder for updating a single Pki entity.
type PkiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PkiMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PkiUpdateOne) SetUpdatedAt(t time.Time) *PkiUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PkiUpdateOne) SetDeletedAt(t time.Time) *PkiUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PkiUpdateOne) SetNillableDeletedAt(t *time.Time) *PkiUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PkiUpdateOne) ClearDeletedAt() *PkiUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetType sets the "type" field.
func (puo *PkiUpdateOne) SetType(pk pki.Type) *PkiUpdateOne {
	puo.mutation.SetType(pk)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PkiUpdateOne) SetNillableType(pk *pki.Type) *PkiUpdateOne {
	if pk != nil {
		puo.SetType(*pk)
	}
	return puo
}

// SetKey sets the "key" field.
func (puo *PkiUpdateOne) SetKey(b []byte) *PkiUpdateOne {
	puo.mutation.SetKey(b)
	return puo
}

// SetCert sets the "cert" field.
func (puo *PkiUpdateOne) SetCert(b []byte) *PkiUpdateOne {
	puo.mutation.SetCert(b)
	return puo
}

// Mutation returns the PkiMutation object of the builder.
func (puo *PkiUpdateOne) Mutation() *PkiMutation {
	return puo.mutation
}

// Where appends a list predicates to the PkiUpdate builder.
func (puo *PkiUpdateOne) Where(ps ...predicate.Pki) *PkiUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PkiUpdateOne) Select(field string, fields ...string) *PkiUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pki entity.
func (puo *PkiUpdateOne) Save(ctx context.Context) (*Pki, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PkiUpdateOne) SaveX(ctx context.Context) *Pki {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PkiUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PkiUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PkiUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if pki.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pki.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pki.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PkiUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := pki.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pki.type": %w`, err)}
		}
	}
	return nil
}

func (puo *PkiUpdateOne) sqlSave(ctx context.Context) (_node *Pki, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pki.Table, pki.Columns, sqlgraph.NewFieldSpec(pki.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pki.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pki.FieldID)
		for _, f := range fields {
			if !pki.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pki.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(pki.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(pki.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(pki.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(pki.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Key(); ok {
		_spec.SetField(pki.FieldKey, field.TypeBytes, value)
	}
	if value, ok := puo.mutation.Cert(); ok {
		_spec.SetField(pki.FieldCert, field.TypeBytes, value)
	}
	_node = &Pki{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pki.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
