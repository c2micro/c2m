// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2m/internal/ent/pki"
)

// PkiCreate is the builder for creating a Pki entity.
type PkiCreate struct {
	config
	mutation *PkiMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PkiCreate) SetCreatedAt(t time.Time) *PkiCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PkiCreate) SetNillableCreatedAt(t *time.Time) *PkiCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PkiCreate) SetUpdatedAt(t time.Time) *PkiCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PkiCreate) SetNillableUpdatedAt(t *time.Time) *PkiCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PkiCreate) SetDeletedAt(t time.Time) *PkiCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PkiCreate) SetNillableDeletedAt(t *time.Time) *PkiCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *PkiCreate) SetType(pk pki.Type) *PkiCreate {
	pc.mutation.SetType(pk)
	return pc
}

// SetKey sets the "key" field.
func (pc *PkiCreate) SetKey(b []byte) *PkiCreate {
	pc.mutation.SetKey(b)
	return pc
}

// SetCert sets the "cert" field.
func (pc *PkiCreate) SetCert(b []byte) *PkiCreate {
	pc.mutation.SetCert(b)
	return pc
}

// Mutation returns the PkiMutation object of the builder.
func (pc *PkiCreate) Mutation() *PkiMutation {
	return pc.mutation
}

// Save creates the Pki in the database.
func (pc *PkiCreate) Save(ctx context.Context) (*Pki, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PkiCreate) SaveX(ctx context.Context) *Pki {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PkiCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PkiCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PkiCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if pki.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized pki.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := pki.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if pki.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pki.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pki.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PkiCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pki.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Pki.updated_at"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Pki.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := pki.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pki.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Pki.key"`)}
	}
	if _, ok := pc.mutation.Cert(); !ok {
		return &ValidationError{Name: "cert", err: errors.New(`ent: missing required field "Pki.cert"`)}
	}
	return nil
}

func (pc *PkiCreate) sqlSave(ctx context.Context) (*Pki, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PkiCreate) createSpec() (*Pki, *sqlgraph.CreateSpec) {
	var (
		_node = &Pki{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pki.Table, sqlgraph.NewFieldSpec(pki.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pki.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(pki.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(pki.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(pki.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Key(); ok {
		_spec.SetField(pki.FieldKey, field.TypeBytes, value)
		_node.Key = value
	}
	if value, ok := pc.mutation.Cert(); ok {
		_spec.SetField(pki.FieldCert, field.TypeBytes, value)
		_node.Cert = value
	}
	return _node, _spec
}

// PkiCreateBulk is the builder for creating many Pki entities in bulk.
type PkiCreateBulk struct {
	config
	err      error
	builders []*PkiCreate
}

// Save creates the Pki entities in the database.
func (pcb *PkiCreateBulk) Save(ctx context.Context) ([]*Pki, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pki, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PkiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PkiCreateBulk) SaveX(ctx context.Context) []*Pki {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PkiCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PkiCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
