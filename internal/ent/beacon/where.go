// Code generated by ent, DO NOT EDIT.

package beacon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/c2micro/c2msrv/internal/ent/predicate"
	"github.com/c2micro/c2msrv/internal/types"
	"github.com/c2micro/c2mshr/defaults"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldDeletedAt, v))
}

// Bid applies equality check predicate on the "bid" field. It's identical to BidEQ.
func Bid(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldBid, v))
}

// ListenerID applies equality check predicate on the "listener_id" field. It's identical to ListenerIDEQ.
func ListenerID(v int) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldListenerID, v))
}

// ExtIP applies equality check predicate on the "ext_ip" field. It's identical to ExtIPEQ.
func ExtIP(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldExtIP, v))
}

// IntIP applies equality check predicate on the "int_ip" field. It's identical to IntIPEQ.
func IntIP(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldIntIP, v))
}

// OsMeta applies equality check predicate on the "os_meta" field. It's identical to OsMetaEQ.
func OsMeta(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldOsMeta, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldHostname, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldUsername, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldDomain, v))
}

// Privileged applies equality check predicate on the "privileged" field. It's identical to PrivilegedEQ.
func Privileged(v bool) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldPrivileged, v))
}

// ProcessName applies equality check predicate on the "process_name" field. It's identical to ProcessNameEQ.
func ProcessName(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldProcessName, v))
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldPid, v))
}

// Sleep applies equality check predicate on the "sleep" field. It's identical to SleepEQ.
func Sleep(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldSleep, v))
}

// Jitter applies equality check predicate on the "jitter" field. It's identical to JitterEQ.
func Jitter(v uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldJitter, v))
}

// First applies equality check predicate on the "first" field. It's identical to FirstEQ.
func First(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldFirst, v))
}

// Last applies equality check predicate on the "last" field. It's identical to LastEQ.
func Last(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldLast, v))
}

// Caps applies equality check predicate on the "caps" field. It's identical to CapsEQ.
func Caps(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldCaps, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldNote, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldColor, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldDeletedAt))
}

// BidEQ applies the EQ predicate on the "bid" field.
func BidEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldBid, v))
}

// BidNEQ applies the NEQ predicate on the "bid" field.
func BidNEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldBid, v))
}

// BidIn applies the In predicate on the "bid" field.
func BidIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldBid, vs...))
}

// BidNotIn applies the NotIn predicate on the "bid" field.
func BidNotIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldBid, vs...))
}

// BidGT applies the GT predicate on the "bid" field.
func BidGT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldBid, v))
}

// BidGTE applies the GTE predicate on the "bid" field.
func BidGTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldBid, v))
}

// BidLT applies the LT predicate on the "bid" field.
func BidLT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldBid, v))
}

// BidLTE applies the LTE predicate on the "bid" field.
func BidLTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldBid, v))
}

// ListenerIDEQ applies the EQ predicate on the "listener_id" field.
func ListenerIDEQ(v int) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldListenerID, v))
}

// ListenerIDNEQ applies the NEQ predicate on the "listener_id" field.
func ListenerIDNEQ(v int) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldListenerID, v))
}

// ListenerIDIn applies the In predicate on the "listener_id" field.
func ListenerIDIn(vs ...int) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldListenerID, vs...))
}

// ListenerIDNotIn applies the NotIn predicate on the "listener_id" field.
func ListenerIDNotIn(vs ...int) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldListenerID, vs...))
}

// ExtIPEQ applies the EQ predicate on the "ext_ip" field.
func ExtIPEQ(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldExtIP, v))
}

// ExtIPNEQ applies the NEQ predicate on the "ext_ip" field.
func ExtIPNEQ(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldExtIP, v))
}

// ExtIPIn applies the In predicate on the "ext_ip" field.
func ExtIPIn(vs ...types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldExtIP, vs...))
}

// ExtIPNotIn applies the NotIn predicate on the "ext_ip" field.
func ExtIPNotIn(vs ...types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldExtIP, vs...))
}

// ExtIPGT applies the GT predicate on the "ext_ip" field.
func ExtIPGT(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldExtIP, v))
}

// ExtIPGTE applies the GTE predicate on the "ext_ip" field.
func ExtIPGTE(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldExtIP, v))
}

// ExtIPLT applies the LT predicate on the "ext_ip" field.
func ExtIPLT(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldExtIP, v))
}

// ExtIPLTE applies the LTE predicate on the "ext_ip" field.
func ExtIPLTE(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldExtIP, v))
}

// ExtIPContains applies the Contains predicate on the "ext_ip" field.
func ExtIPContains(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldContains(FieldExtIP, vc))
}

// ExtIPHasPrefix applies the HasPrefix predicate on the "ext_ip" field.
func ExtIPHasPrefix(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldHasPrefix(FieldExtIP, vc))
}

// ExtIPHasSuffix applies the HasSuffix predicate on the "ext_ip" field.
func ExtIPHasSuffix(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldHasSuffix(FieldExtIP, vc))
}

// ExtIPIsNil applies the IsNil predicate on the "ext_ip" field.
func ExtIPIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldExtIP))
}

// ExtIPNotNil applies the NotNil predicate on the "ext_ip" field.
func ExtIPNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldExtIP))
}

// ExtIPEqualFold applies the EqualFold predicate on the "ext_ip" field.
func ExtIPEqualFold(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldEqualFold(FieldExtIP, vc))
}

// ExtIPContainsFold applies the ContainsFold predicate on the "ext_ip" field.
func ExtIPContainsFold(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldContainsFold(FieldExtIP, vc))
}

// IntIPEQ applies the EQ predicate on the "int_ip" field.
func IntIPEQ(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldIntIP, v))
}

// IntIPNEQ applies the NEQ predicate on the "int_ip" field.
func IntIPNEQ(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldIntIP, v))
}

// IntIPIn applies the In predicate on the "int_ip" field.
func IntIPIn(vs ...types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldIntIP, vs...))
}

// IntIPNotIn applies the NotIn predicate on the "int_ip" field.
func IntIPNotIn(vs ...types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldIntIP, vs...))
}

// IntIPGT applies the GT predicate on the "int_ip" field.
func IntIPGT(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldIntIP, v))
}

// IntIPGTE applies the GTE predicate on the "int_ip" field.
func IntIPGTE(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldIntIP, v))
}

// IntIPLT applies the LT predicate on the "int_ip" field.
func IntIPLT(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldIntIP, v))
}

// IntIPLTE applies the LTE predicate on the "int_ip" field.
func IntIPLTE(v types.Inet) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldIntIP, v))
}

// IntIPContains applies the Contains predicate on the "int_ip" field.
func IntIPContains(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldContains(FieldIntIP, vc))
}

// IntIPHasPrefix applies the HasPrefix predicate on the "int_ip" field.
func IntIPHasPrefix(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldHasPrefix(FieldIntIP, vc))
}

// IntIPHasSuffix applies the HasSuffix predicate on the "int_ip" field.
func IntIPHasSuffix(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldHasSuffix(FieldIntIP, vc))
}

// IntIPIsNil applies the IsNil predicate on the "int_ip" field.
func IntIPIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldIntIP))
}

// IntIPNotNil applies the NotNil predicate on the "int_ip" field.
func IntIPNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldIntIP))
}

// IntIPEqualFold applies the EqualFold predicate on the "int_ip" field.
func IntIPEqualFold(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldEqualFold(FieldIntIP, vc))
}

// IntIPContainsFold applies the ContainsFold predicate on the "int_ip" field.
func IntIPContainsFold(v types.Inet) predicate.Beacon {
	vc := v.String()
	return predicate.Beacon(sql.FieldContainsFold(FieldIntIP, vc))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v defaults.BeaconOS) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v defaults.BeaconOS) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...defaults.BeaconOS) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...defaults.BeaconOS) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldOs, vs...))
}

// OsMetaEQ applies the EQ predicate on the "os_meta" field.
func OsMetaEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldOsMeta, v))
}

// OsMetaNEQ applies the NEQ predicate on the "os_meta" field.
func OsMetaNEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldOsMeta, v))
}

// OsMetaIn applies the In predicate on the "os_meta" field.
func OsMetaIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldOsMeta, vs...))
}

// OsMetaNotIn applies the NotIn predicate on the "os_meta" field.
func OsMetaNotIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldOsMeta, vs...))
}

// OsMetaGT applies the GT predicate on the "os_meta" field.
func OsMetaGT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldOsMeta, v))
}

// OsMetaGTE applies the GTE predicate on the "os_meta" field.
func OsMetaGTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldOsMeta, v))
}

// OsMetaLT applies the LT predicate on the "os_meta" field.
func OsMetaLT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldOsMeta, v))
}

// OsMetaLTE applies the LTE predicate on the "os_meta" field.
func OsMetaLTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldOsMeta, v))
}

// OsMetaContains applies the Contains predicate on the "os_meta" field.
func OsMetaContains(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContains(FieldOsMeta, v))
}

// OsMetaHasPrefix applies the HasPrefix predicate on the "os_meta" field.
func OsMetaHasPrefix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasPrefix(FieldOsMeta, v))
}

// OsMetaHasSuffix applies the HasSuffix predicate on the "os_meta" field.
func OsMetaHasSuffix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasSuffix(FieldOsMeta, v))
}

// OsMetaIsNil applies the IsNil predicate on the "os_meta" field.
func OsMetaIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldOsMeta))
}

// OsMetaNotNil applies the NotNil predicate on the "os_meta" field.
func OsMetaNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldOsMeta))
}

// OsMetaEqualFold applies the EqualFold predicate on the "os_meta" field.
func OsMetaEqualFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEqualFold(FieldOsMeta, v))
}

// OsMetaContainsFold applies the ContainsFold predicate on the "os_meta" field.
func OsMetaContainsFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContainsFold(FieldOsMeta, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameIsNil applies the IsNil predicate on the "hostname" field.
func HostnameIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldHostname))
}

// HostnameNotNil applies the NotNil predicate on the "hostname" field.
func HostnameNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldHostname))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContainsFold(FieldHostname, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContainsFold(FieldUsername, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldDomain))
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldDomain))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContainsFold(FieldDomain, v))
}

// PrivilegedEQ applies the EQ predicate on the "privileged" field.
func PrivilegedEQ(v bool) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldPrivileged, v))
}

// PrivilegedNEQ applies the NEQ predicate on the "privileged" field.
func PrivilegedNEQ(v bool) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldPrivileged, v))
}

// PrivilegedIsNil applies the IsNil predicate on the "privileged" field.
func PrivilegedIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldPrivileged))
}

// PrivilegedNotNil applies the NotNil predicate on the "privileged" field.
func PrivilegedNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldPrivileged))
}

// ProcessNameEQ applies the EQ predicate on the "process_name" field.
func ProcessNameEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldProcessName, v))
}

// ProcessNameNEQ applies the NEQ predicate on the "process_name" field.
func ProcessNameNEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldProcessName, v))
}

// ProcessNameIn applies the In predicate on the "process_name" field.
func ProcessNameIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldProcessName, vs...))
}

// ProcessNameNotIn applies the NotIn predicate on the "process_name" field.
func ProcessNameNotIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldProcessName, vs...))
}

// ProcessNameGT applies the GT predicate on the "process_name" field.
func ProcessNameGT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldProcessName, v))
}

// ProcessNameGTE applies the GTE predicate on the "process_name" field.
func ProcessNameGTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldProcessName, v))
}

// ProcessNameLT applies the LT predicate on the "process_name" field.
func ProcessNameLT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldProcessName, v))
}

// ProcessNameLTE applies the LTE predicate on the "process_name" field.
func ProcessNameLTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldProcessName, v))
}

// ProcessNameContains applies the Contains predicate on the "process_name" field.
func ProcessNameContains(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContains(FieldProcessName, v))
}

// ProcessNameHasPrefix applies the HasPrefix predicate on the "process_name" field.
func ProcessNameHasPrefix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasPrefix(FieldProcessName, v))
}

// ProcessNameHasSuffix applies the HasSuffix predicate on the "process_name" field.
func ProcessNameHasSuffix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasSuffix(FieldProcessName, v))
}

// ProcessNameIsNil applies the IsNil predicate on the "process_name" field.
func ProcessNameIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldProcessName))
}

// ProcessNameNotNil applies the NotNil predicate on the "process_name" field.
func ProcessNameNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldProcessName))
}

// ProcessNameEqualFold applies the EqualFold predicate on the "process_name" field.
func ProcessNameEqualFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEqualFold(FieldProcessName, v))
}

// ProcessNameContainsFold applies the ContainsFold predicate on the "process_name" field.
func ProcessNameContainsFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContainsFold(FieldProcessName, v))
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldPid, v))
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldPid, v))
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldPid, vs...))
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldPid, vs...))
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldPid, v))
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldPid, v))
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldPid, v))
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldPid, v))
}

// PidIsNil applies the IsNil predicate on the "pid" field.
func PidIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldPid))
}

// PidNotNil applies the NotNil predicate on the "pid" field.
func PidNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldPid))
}

// ArchEQ applies the EQ predicate on the "arch" field.
func ArchEQ(v defaults.BeaconArch) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldArch, v))
}

// ArchNEQ applies the NEQ predicate on the "arch" field.
func ArchNEQ(v defaults.BeaconArch) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldArch, v))
}

// ArchIn applies the In predicate on the "arch" field.
func ArchIn(vs ...defaults.BeaconArch) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldArch, vs...))
}

// ArchNotIn applies the NotIn predicate on the "arch" field.
func ArchNotIn(vs ...defaults.BeaconArch) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldArch, vs...))
}

// SleepEQ applies the EQ predicate on the "sleep" field.
func SleepEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldSleep, v))
}

// SleepNEQ applies the NEQ predicate on the "sleep" field.
func SleepNEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldSleep, v))
}

// SleepIn applies the In predicate on the "sleep" field.
func SleepIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldSleep, vs...))
}

// SleepNotIn applies the NotIn predicate on the "sleep" field.
func SleepNotIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldSleep, vs...))
}

// SleepGT applies the GT predicate on the "sleep" field.
func SleepGT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldSleep, v))
}

// SleepGTE applies the GTE predicate on the "sleep" field.
func SleepGTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldSleep, v))
}

// SleepLT applies the LT predicate on the "sleep" field.
func SleepLT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldSleep, v))
}

// SleepLTE applies the LTE predicate on the "sleep" field.
func SleepLTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldSleep, v))
}

// JitterEQ applies the EQ predicate on the "jitter" field.
func JitterEQ(v uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldJitter, v))
}

// JitterNEQ applies the NEQ predicate on the "jitter" field.
func JitterNEQ(v uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldJitter, v))
}

// JitterIn applies the In predicate on the "jitter" field.
func JitterIn(vs ...uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldJitter, vs...))
}

// JitterNotIn applies the NotIn predicate on the "jitter" field.
func JitterNotIn(vs ...uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldJitter, vs...))
}

// JitterGT applies the GT predicate on the "jitter" field.
func JitterGT(v uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldJitter, v))
}

// JitterGTE applies the GTE predicate on the "jitter" field.
func JitterGTE(v uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldJitter, v))
}

// JitterLT applies the LT predicate on the "jitter" field.
func JitterLT(v uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldJitter, v))
}

// JitterLTE applies the LTE predicate on the "jitter" field.
func JitterLTE(v uint8) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldJitter, v))
}

// FirstEQ applies the EQ predicate on the "first" field.
func FirstEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldFirst, v))
}

// FirstNEQ applies the NEQ predicate on the "first" field.
func FirstNEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldFirst, v))
}

// FirstIn applies the In predicate on the "first" field.
func FirstIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldFirst, vs...))
}

// FirstNotIn applies the NotIn predicate on the "first" field.
func FirstNotIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldFirst, vs...))
}

// FirstGT applies the GT predicate on the "first" field.
func FirstGT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldFirst, v))
}

// FirstGTE applies the GTE predicate on the "first" field.
func FirstGTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldFirst, v))
}

// FirstLT applies the LT predicate on the "first" field.
func FirstLT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldFirst, v))
}

// FirstLTE applies the LTE predicate on the "first" field.
func FirstLTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldFirst, v))
}

// LastEQ applies the EQ predicate on the "last" field.
func LastEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldLast, v))
}

// LastNEQ applies the NEQ predicate on the "last" field.
func LastNEQ(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldLast, v))
}

// LastIn applies the In predicate on the "last" field.
func LastIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldLast, vs...))
}

// LastNotIn applies the NotIn predicate on the "last" field.
func LastNotIn(vs ...time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldLast, vs...))
}

// LastGT applies the GT predicate on the "last" field.
func LastGT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldLast, v))
}

// LastGTE applies the GTE predicate on the "last" field.
func LastGTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldLast, v))
}

// LastLT applies the LT predicate on the "last" field.
func LastLT(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldLast, v))
}

// LastLTE applies the LTE predicate on the "last" field.
func LastLTE(v time.Time) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldLast, v))
}

// CapsEQ applies the EQ predicate on the "caps" field.
func CapsEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldCaps, v))
}

// CapsNEQ applies the NEQ predicate on the "caps" field.
func CapsNEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldCaps, v))
}

// CapsIn applies the In predicate on the "caps" field.
func CapsIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldCaps, vs...))
}

// CapsNotIn applies the NotIn predicate on the "caps" field.
func CapsNotIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldCaps, vs...))
}

// CapsGT applies the GT predicate on the "caps" field.
func CapsGT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldCaps, v))
}

// CapsGTE applies the GTE predicate on the "caps" field.
func CapsGTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldCaps, v))
}

// CapsLT applies the LT predicate on the "caps" field.
func CapsLT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldCaps, v))
}

// CapsLTE applies the LTE predicate on the "caps" field.
func CapsLTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldCaps, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.Beacon {
	return predicate.Beacon(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Beacon {
	return predicate.Beacon(sql.FieldContainsFold(FieldNote, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v uint32) predicate.Beacon {
	return predicate.Beacon(sql.FieldLTE(FieldColor, v))
}

// HasListener applies the HasEdge predicate on the "listener" edge.
func HasListener() predicate.Beacon {
	return predicate.Beacon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ListenerTable, ListenerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasListenerWith applies the HasEdge predicate on the "listener" edge with a given conditions (other predicates).
func HasListenerWith(preds ...predicate.Listener) predicate.Beacon {
	return predicate.Beacon(func(s *sql.Selector) {
		step := newListenerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.Beacon {
	return predicate.Beacon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.Beacon {
	return predicate.Beacon(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Beacon {
	return predicate.Beacon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Beacon {
	return predicate.Beacon(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Beacon) predicate.Beacon {
	return predicate.Beacon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Beacon) predicate.Beacon {
	return predicate.Beacon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Beacon) predicate.Beacon {
	return predicate.Beacon(sql.NotPredicates(p))
}
