// Code generated by ent, DO NOT EDIT.

package beacon

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/c2micro/c2mshr/defaults"
)

const (
	// Label holds the string label denoting the beacon type in the database.
	Label = "beacon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldBid holds the string denoting the bid field in the database.
	FieldBid = "bid"
	// FieldListenerID holds the string denoting the listener_id field in the database.
	FieldListenerID = "listener_id"
	// FieldExtIP holds the string denoting the ext_ip field in the database.
	FieldExtIP = "ext_ip"
	// FieldIntIP holds the string denoting the int_ip field in the database.
	FieldIntIP = "int_ip"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldOsMeta holds the string denoting the os_meta field in the database.
	FieldOsMeta = "os_meta"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldPrivileged holds the string denoting the privileged field in the database.
	FieldPrivileged = "privileged"
	// FieldProcessName holds the string denoting the process_name field in the database.
	FieldProcessName = "process_name"
	// FieldPid holds the string denoting the pid field in the database.
	FieldPid = "pid"
	// FieldArch holds the string denoting the arch field in the database.
	FieldArch = "arch"
	// FieldSleep holds the string denoting the sleep field in the database.
	FieldSleep = "sleep"
	// FieldJitter holds the string denoting the jitter field in the database.
	FieldJitter = "jitter"
	// FieldFirst holds the string denoting the first field in the database.
	FieldFirst = "first"
	// FieldLast holds the string denoting the last field in the database.
	FieldLast = "last"
	// FieldCaps holds the string denoting the caps field in the database.
	FieldCaps = "caps"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// EdgeListener holds the string denoting the listener edge name in mutations.
	EdgeListener = "listener"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the beacon in the database.
	Table = "beacon"
	// ListenerTable is the table that holds the listener relation/edge.
	ListenerTable = "beacon"
	// ListenerInverseTable is the table name for the Listener entity.
	// It exists in this package in order to avoid circular dependency with the "listener" package.
	ListenerInverseTable = "listener"
	// ListenerColumn is the table column denoting the listener relation/edge.
	ListenerColumn = "listener_id"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "group"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "group"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "bid"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "task"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "task"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "bid"
)

// Columns holds all SQL columns for beacon fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldBid,
	FieldListenerID,
	FieldExtIP,
	FieldIntIP,
	FieldOs,
	FieldOsMeta,
	FieldHostname,
	FieldUsername,
	FieldDomain,
	FieldPrivileged,
	FieldProcessName,
	FieldPid,
	FieldArch,
	FieldSleep,
	FieldJitter,
	FieldFirst,
	FieldLast,
	FieldCaps,
	FieldNote,
	FieldColor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/c2micro/c2msrv/internal/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ExtIPValidator is a validator for the "ext_ip" field. It is called by the builders before save.
	ExtIPValidator func(string) error
	// IntIPValidator is a validator for the "int_ip" field. It is called by the builders before save.
	IntIPValidator func(string) error
	// OsMetaValidator is a validator for the "os_meta" field. It is called by the builders before save.
	OsMetaValidator func(string) error
	// HostnameValidator is a validator for the "hostname" field. It is called by the builders before save.
	HostnameValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DomainValidator is a validator for the "domain" field. It is called by the builders before save.
	DomainValidator func(string) error
	// ProcessNameValidator is a validator for the "process_name" field. It is called by the builders before save.
	ProcessNameValidator func(string) error
	// DefaultFirst holds the default value on creation for the "first" field.
	DefaultFirst func() time.Time
	// DefaultLast holds the default value on creation for the "last" field.
	DefaultLast func() time.Time
	// NoteValidator is a validator for the "note" field. It is called by the builders before save.
	NoteValidator func(string) error
	// DefaultColor holds the default value on creation for the "color" field.
	DefaultColor uint32
)

// OsValidator is a validator for the "os" field enum values. It is called by the builders before save.
func OsValidator(o defaults.BeaconOS) error {
	switch o.String() {
	case "unknown", "linux", "windows", "macos":
		return nil
	default:
		return fmt.Errorf("beacon: invalid enum value for os field: %q", o)
	}
}

// ArchValidator is a validator for the "arch" field enum values. It is called by the builders before save.
func ArchValidator(a defaults.BeaconArch) error {
	switch a.String() {
	case "unknown", "x86", "x64", "arm32", "arm64":
		return nil
	default:
		return fmt.Errorf("beacon: invalid enum value for arch field: %q", a)
	}
}

// OrderOption defines the ordering options for the Beacon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByBid orders the results by the bid field.
func ByBid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBid, opts...).ToFunc()
}

// ByListenerID orders the results by the listener_id field.
func ByListenerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldListenerID, opts...).ToFunc()
}

// ByExtIP orders the results by the ext_ip field.
func ByExtIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtIP, opts...).ToFunc()
}

// ByIntIP orders the results by the int_ip field.
func ByIntIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntIP, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByOsMeta orders the results by the os_meta field.
func ByOsMeta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsMeta, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByPrivileged orders the results by the privileged field.
func ByPrivileged(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivileged, opts...).ToFunc()
}

// ByProcessName orders the results by the process_name field.
func ByProcessName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessName, opts...).ToFunc()
}

// ByPid orders the results by the pid field.
func ByPid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPid, opts...).ToFunc()
}

// ByArch orders the results by the arch field.
func ByArch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArch, opts...).ToFunc()
}

// BySleep orders the results by the sleep field.
func BySleep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSleep, opts...).ToFunc()
}

// ByJitter orders the results by the jitter field.
func ByJitter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJitter, opts...).ToFunc()
}

// ByFirst orders the results by the first field.
func ByFirst(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirst, opts...).ToFunc()
}

// ByLast orders the results by the last field.
func ByLast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLast, opts...).ToFunc()
}

// ByCaps orders the results by the caps field.
func ByCaps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaps, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByListenerField orders the results by listener field.
func ByListenerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newListenerStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupCount orders the results by group count.
func ByGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupStep(), opts...)
	}
}

// ByGroup orders the results by group terms.
func ByGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaskCount orders the results by task count.
func ByTaskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskStep(), opts...)
	}
}

// ByTask orders the results by task terms.
func ByTask(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newListenerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ListenerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ListenerTable, ListenerColumn),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupTable, GroupColumn),
	)
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskTable, TaskColumn),
	)
}
