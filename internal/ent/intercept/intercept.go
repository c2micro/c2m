// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/c2micro/c2msrv/internal/ent"
	"github.com/c2micro/c2msrv/internal/ent/beacon"
	"github.com/c2micro/c2msrv/internal/ent/blobber"
	"github.com/c2micro/c2msrv/internal/ent/chat"
	"github.com/c2micro/c2msrv/internal/ent/credential"
	"github.com/c2micro/c2msrv/internal/ent/group"
	"github.com/c2micro/c2msrv/internal/ent/listener"
	"github.com/c2micro/c2msrv/internal/ent/message"
	"github.com/c2micro/c2msrv/internal/ent/operator"
	"github.com/c2micro/c2msrv/internal/ent/pki"
	"github.com/c2micro/c2msrv/internal/ent/predicate"
	"github.com/c2micro/c2msrv/internal/ent/task"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The BeaconFunc type is an adapter to allow the use of ordinary function as a Querier.
type BeaconFunc func(context.Context, *ent.BeaconQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BeaconFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BeaconQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BeaconQuery", q)
}

// The TraverseBeacon type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBeacon func(context.Context, *ent.BeaconQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBeacon) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBeacon) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BeaconQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BeaconQuery", q)
}

// The BlobberFunc type is an adapter to allow the use of ordinary function as a Querier.
type BlobberFunc func(context.Context, *ent.BlobberQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BlobberFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BlobberQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BlobberQuery", q)
}

// The TraverseBlobber type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBlobber func(context.Context, *ent.BlobberQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBlobber) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBlobber) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlobberQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BlobberQuery", q)
}

// The ChatFunc type is an adapter to allow the use of ordinary function as a Querier.
type ChatFunc func(context.Context, *ent.ChatQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ChatFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ChatQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ChatQuery", q)
}

// The TraverseChat type is an adapter to allow the use of ordinary function as Traverser.
type TraverseChat func(context.Context, *ent.ChatQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseChat) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseChat) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChatQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ChatQuery", q)
}

// The CredentialFunc type is an adapter to allow the use of ordinary function as a Querier.
type CredentialFunc func(context.Context, *ent.CredentialQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CredentialFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CredentialQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CredentialQuery", q)
}

// The TraverseCredential type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCredential func(context.Context, *ent.CredentialQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCredential) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCredential) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CredentialQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CredentialQuery", q)
}

// The GroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type GroupFunc func(context.Context, *ent.GroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f GroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.GroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.GroupQuery", q)
}

// The TraverseGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGroup func(context.Context, *ent.GroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.GroupQuery", q)
}

// The ListenerFunc type is an adapter to allow the use of ordinary function as a Querier.
type ListenerFunc func(context.Context, *ent.ListenerQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ListenerFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ListenerQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ListenerQuery", q)
}

// The TraverseListener type is an adapter to allow the use of ordinary function as Traverser.
type TraverseListener func(context.Context, *ent.ListenerQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseListener) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseListener) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ListenerQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ListenerQuery", q)
}

// The MessageFunc type is an adapter to allow the use of ordinary function as a Querier.
type MessageFunc func(context.Context, *ent.MessageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MessageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MessageQuery", q)
}

// The TraverseMessage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMessage func(context.Context, *ent.MessageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMessage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMessage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MessageQuery", q)
}

// The OperatorFunc type is an adapter to allow the use of ordinary function as a Querier.
type OperatorFunc func(context.Context, *ent.OperatorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OperatorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OperatorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OperatorQuery", q)
}

// The TraverseOperator type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOperator func(context.Context, *ent.OperatorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOperator) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOperator) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OperatorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OperatorQuery", q)
}

// The PkiFunc type is an adapter to allow the use of ordinary function as a Querier.
type PkiFunc func(context.Context, *ent.PkiQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PkiFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PkiQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PkiQuery", q)
}

// The TraversePki type is an adapter to allow the use of ordinary function as Traverser.
type TraversePki func(context.Context, *ent.PkiQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePki) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePki) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PkiQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PkiQuery", q)
}

// The TaskFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskFunc func(context.Context, *ent.TaskQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TaskFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TraverseTask type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTask func(context.Context, *ent.TaskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTask) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTask) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.BeaconQuery:
		return &query[*ent.BeaconQuery, predicate.Beacon, beacon.OrderOption]{typ: ent.TypeBeacon, tq: q}, nil
	case *ent.BlobberQuery:
		return &query[*ent.BlobberQuery, predicate.Blobber, blobber.OrderOption]{typ: ent.TypeBlobber, tq: q}, nil
	case *ent.ChatQuery:
		return &query[*ent.ChatQuery, predicate.Chat, chat.OrderOption]{typ: ent.TypeChat, tq: q}, nil
	case *ent.CredentialQuery:
		return &query[*ent.CredentialQuery, predicate.Credential, credential.OrderOption]{typ: ent.TypeCredential, tq: q}, nil
	case *ent.GroupQuery:
		return &query[*ent.GroupQuery, predicate.Group, group.OrderOption]{typ: ent.TypeGroup, tq: q}, nil
	case *ent.ListenerQuery:
		return &query[*ent.ListenerQuery, predicate.Listener, listener.OrderOption]{typ: ent.TypeListener, tq: q}, nil
	case *ent.MessageQuery:
		return &query[*ent.MessageQuery, predicate.Message, message.OrderOption]{typ: ent.TypeMessage, tq: q}, nil
	case *ent.OperatorQuery:
		return &query[*ent.OperatorQuery, predicate.Operator, operator.OrderOption]{typ: ent.TypeOperator, tq: q}, nil
	case *ent.PkiQuery:
		return &query[*ent.PkiQuery, predicate.Pki, pki.OrderOption]{typ: ent.TypePki, tq: q}, nil
	case *ent.TaskQuery:
		return &query[*ent.TaskQuery, predicate.Task, task.OrderOption]{typ: ent.TypeTask, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
