// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2msrv/internal/ent/blobber"
	"github.com/c2micro/c2msrv/internal/ent/predicate"
	"github.com/c2micro/c2msrv/internal/ent/task"
)

// BlobberUpdate is the builder for updating Blobber entities.
type BlobberUpdate struct {
	config
	hooks    []Hook
	mutation *BlobberMutation
}

// Where appends a list predicates to the BlobberUpdate builder.
func (bu *BlobberUpdate) Where(ps ...predicate.Blobber) *BlobberUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BlobberUpdate) SetUpdatedAt(t time.Time) *BlobberUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BlobberUpdate) SetDeletedAt(t time.Time) *BlobberUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BlobberUpdate) SetNillableDeletedAt(t *time.Time) *BlobberUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BlobberUpdate) ClearDeletedAt() *BlobberUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetHash sets the "hash" field.
func (bu *BlobberUpdate) SetHash(b []byte) *BlobberUpdate {
	bu.mutation.SetHash(b)
	return bu
}

// SetBlob sets the "blob" field.
func (bu *BlobberUpdate) SetBlob(b []byte) *BlobberUpdate {
	bu.mutation.SetBlob(b)
	return bu
}

// SetSize sets the "size" field.
func (bu *BlobberUpdate) SetSize(i int) *BlobberUpdate {
	bu.mutation.ResetSize()
	bu.mutation.SetSize(i)
	return bu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bu *BlobberUpdate) SetNillableSize(i *int) *BlobberUpdate {
	if i != nil {
		bu.SetSize(*i)
	}
	return bu
}

// AddSize adds i to the "size" field.
func (bu *BlobberUpdate) AddSize(i int) *BlobberUpdate {
	bu.mutation.AddSize(i)
	return bu
}

// AddTaskArgIDs adds the "task_args" edge to the Task entity by IDs.
func (bu *BlobberUpdate) AddTaskArgIDs(ids ...int) *BlobberUpdate {
	bu.mutation.AddTaskArgIDs(ids...)
	return bu
}

// AddTaskArgs adds the "task_args" edges to the Task entity.
func (bu *BlobberUpdate) AddTaskArgs(t ...*Task) *BlobberUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddTaskArgIDs(ids...)
}

// AddTaskOutputIDs adds the "task_output" edge to the Task entity by IDs.
func (bu *BlobberUpdate) AddTaskOutputIDs(ids ...int) *BlobberUpdate {
	bu.mutation.AddTaskOutputIDs(ids...)
	return bu
}

// AddTaskOutput adds the "task_output" edges to the Task entity.
func (bu *BlobberUpdate) AddTaskOutput(t ...*Task) *BlobberUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddTaskOutputIDs(ids...)
}

// Mutation returns the BlobberMutation object of the builder.
func (bu *BlobberUpdate) Mutation() *BlobberMutation {
	return bu.mutation
}

// ClearTaskArgs clears all "task_args" edges to the Task entity.
func (bu *BlobberUpdate) ClearTaskArgs() *BlobberUpdate {
	bu.mutation.ClearTaskArgs()
	return bu
}

// RemoveTaskArgIDs removes the "task_args" edge to Task entities by IDs.
func (bu *BlobberUpdate) RemoveTaskArgIDs(ids ...int) *BlobberUpdate {
	bu.mutation.RemoveTaskArgIDs(ids...)
	return bu
}

// RemoveTaskArgs removes "task_args" edges to Task entities.
func (bu *BlobberUpdate) RemoveTaskArgs(t ...*Task) *BlobberUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveTaskArgIDs(ids...)
}

// ClearTaskOutput clears all "task_output" edges to the Task entity.
func (bu *BlobberUpdate) ClearTaskOutput() *BlobberUpdate {
	bu.mutation.ClearTaskOutput()
	return bu
}

// RemoveTaskOutputIDs removes the "task_output" edge to Task entities by IDs.
func (bu *BlobberUpdate) RemoveTaskOutputIDs(ids ...int) *BlobberUpdate {
	bu.mutation.RemoveTaskOutputIDs(ids...)
	return bu
}

// RemoveTaskOutput removes "task_output" edges to Task entities.
func (bu *BlobberUpdate) RemoveTaskOutput(t ...*Task) *BlobberUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveTaskOutputIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlobberUpdate) Save(ctx context.Context) (int, error) {
	if err := bu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlobberUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlobberUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlobberUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BlobberUpdate) defaults() error {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		if blobber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blobber.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blobber.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (bu *BlobberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(blobber.Table, blobber.Columns, sqlgraph.NewFieldSpec(blobber.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(blobber.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(blobber.FieldDeletedAt, field.TypeTime, value)
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.ClearField(blobber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Hash(); ok {
		_spec.SetField(blobber.FieldHash, field.TypeBytes, value)
	}
	if value, ok := bu.mutation.Blob(); ok {
		_spec.SetField(blobber.FieldBlob, field.TypeBytes, value)
	}
	if value, ok := bu.mutation.Size(); ok {
		_spec.SetField(blobber.FieldSize, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedSize(); ok {
		_spec.AddField(blobber.FieldSize, field.TypeInt, value)
	}
	if bu.mutation.TaskArgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskArgsTable,
			Columns: []string{blobber.TaskArgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedTaskArgsIDs(); len(nodes) > 0 && !bu.mutation.TaskArgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskArgsTable,
			Columns: []string{blobber.TaskArgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TaskArgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskArgsTable,
			Columns: []string{blobber.TaskArgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TaskOutputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskOutputTable,
			Columns: []string{blobber.TaskOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedTaskOutputIDs(); len(nodes) > 0 && !bu.mutation.TaskOutputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskOutputTable,
			Columns: []string{blobber.TaskOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TaskOutputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskOutputTable,
			Columns: []string{blobber.TaskOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blobber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlobberUpdateOne is the builder for updating a single Blobber entity.
type BlobberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlobberMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BlobberUpdateOne) SetUpdatedAt(t time.Time) *BlobberUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BlobberUpdateOne) SetDeletedAt(t time.Time) *BlobberUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BlobberUpdateOne) SetNillableDeletedAt(t *time.Time) *BlobberUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BlobberUpdateOne) ClearDeletedAt() *BlobberUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetHash sets the "hash" field.
func (buo *BlobberUpdateOne) SetHash(b []byte) *BlobberUpdateOne {
	buo.mutation.SetHash(b)
	return buo
}

// SetBlob sets the "blob" field.
func (buo *BlobberUpdateOne) SetBlob(b []byte) *BlobberUpdateOne {
	buo.mutation.SetBlob(b)
	return buo
}

// SetSize sets the "size" field.
func (buo *BlobberUpdateOne) SetSize(i int) *BlobberUpdateOne {
	buo.mutation.ResetSize()
	buo.mutation.SetSize(i)
	return buo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (buo *BlobberUpdateOne) SetNillableSize(i *int) *BlobberUpdateOne {
	if i != nil {
		buo.SetSize(*i)
	}
	return buo
}

// AddSize adds i to the "size" field.
func (buo *BlobberUpdateOne) AddSize(i int) *BlobberUpdateOne {
	buo.mutation.AddSize(i)
	return buo
}

// AddTaskArgIDs adds the "task_args" edge to the Task entity by IDs.
func (buo *BlobberUpdateOne) AddTaskArgIDs(ids ...int) *BlobberUpdateOne {
	buo.mutation.AddTaskArgIDs(ids...)
	return buo
}

// AddTaskArgs adds the "task_args" edges to the Task entity.
func (buo *BlobberUpdateOne) AddTaskArgs(t ...*Task) *BlobberUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddTaskArgIDs(ids...)
}

// AddTaskOutputIDs adds the "task_output" edge to the Task entity by IDs.
func (buo *BlobberUpdateOne) AddTaskOutputIDs(ids ...int) *BlobberUpdateOne {
	buo.mutation.AddTaskOutputIDs(ids...)
	return buo
}

// AddTaskOutput adds the "task_output" edges to the Task entity.
func (buo *BlobberUpdateOne) AddTaskOutput(t ...*Task) *BlobberUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddTaskOutputIDs(ids...)
}

// Mutation returns the BlobberMutation object of the builder.
func (buo *BlobberUpdateOne) Mutation() *BlobberMutation {
	return buo.mutation
}

// ClearTaskArgs clears all "task_args" edges to the Task entity.
func (buo *BlobberUpdateOne) ClearTaskArgs() *BlobberUpdateOne {
	buo.mutation.ClearTaskArgs()
	return buo
}

// RemoveTaskArgIDs removes the "task_args" edge to Task entities by IDs.
func (buo *BlobberUpdateOne) RemoveTaskArgIDs(ids ...int) *BlobberUpdateOne {
	buo.mutation.RemoveTaskArgIDs(ids...)
	return buo
}

// RemoveTaskArgs removes "task_args" edges to Task entities.
func (buo *BlobberUpdateOne) RemoveTaskArgs(t ...*Task) *BlobberUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveTaskArgIDs(ids...)
}

// ClearTaskOutput clears all "task_output" edges to the Task entity.
func (buo *BlobberUpdateOne) ClearTaskOutput() *BlobberUpdateOne {
	buo.mutation.ClearTaskOutput()
	return buo
}

// RemoveTaskOutputIDs removes the "task_output" edge to Task entities by IDs.
func (buo *BlobberUpdateOne) RemoveTaskOutputIDs(ids ...int) *BlobberUpdateOne {
	buo.mutation.RemoveTaskOutputIDs(ids...)
	return buo
}

// RemoveTaskOutput removes "task_output" edges to Task entities.
func (buo *BlobberUpdateOne) RemoveTaskOutput(t ...*Task) *BlobberUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveTaskOutputIDs(ids...)
}

// Where appends a list predicates to the BlobberUpdate builder.
func (buo *BlobberUpdateOne) Where(ps ...predicate.Blobber) *BlobberUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlobberUpdateOne) Select(field string, fields ...string) *BlobberUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blobber entity.
func (buo *BlobberUpdateOne) Save(ctx context.Context) (*Blobber, error) {
	if err := buo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlobberUpdateOne) SaveX(ctx context.Context) *Blobber {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlobberUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlobberUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BlobberUpdateOne) defaults() error {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		if blobber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blobber.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blobber.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (buo *BlobberUpdateOne) sqlSave(ctx context.Context) (_node *Blobber, err error) {
	_spec := sqlgraph.NewUpdateSpec(blobber.Table, blobber.Columns, sqlgraph.NewFieldSpec(blobber.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blobber.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blobber.FieldID)
		for _, f := range fields {
			if !blobber.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blobber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(blobber.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(blobber.FieldDeletedAt, field.TypeTime, value)
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.ClearField(blobber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Hash(); ok {
		_spec.SetField(blobber.FieldHash, field.TypeBytes, value)
	}
	if value, ok := buo.mutation.Blob(); ok {
		_spec.SetField(blobber.FieldBlob, field.TypeBytes, value)
	}
	if value, ok := buo.mutation.Size(); ok {
		_spec.SetField(blobber.FieldSize, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedSize(); ok {
		_spec.AddField(blobber.FieldSize, field.TypeInt, value)
	}
	if buo.mutation.TaskArgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskArgsTable,
			Columns: []string{blobber.TaskArgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedTaskArgsIDs(); len(nodes) > 0 && !buo.mutation.TaskArgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskArgsTable,
			Columns: []string{blobber.TaskArgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TaskArgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskArgsTable,
			Columns: []string{blobber.TaskArgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TaskOutputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskOutputTable,
			Columns: []string{blobber.TaskOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedTaskOutputIDs(); len(nodes) > 0 && !buo.mutation.TaskOutputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskOutputTable,
			Columns: []string{blobber.TaskOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TaskOutputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blobber.TaskOutputTable,
			Columns: []string{blobber.TaskOutputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Blobber{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blobber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
