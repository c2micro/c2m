// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/c2micro/c2m/internal/ent/listener"
	"github.com/c2micro/c2m/internal/types"
)

// Listener is the model entity for the Listener schema.
type Listener struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time when entity was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Time when entity was updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Time when entity was soft-deleted
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// authentication token of listener
	Token string `json:"token,omitempty"`
	// freehand name of listener
	Name string `json:"name,omitempty"`
	// bind ip address of listener
	IP types.Inet `json:"ip,omitempty"`
	// bind port of listener
	Port uint16 `json:"port,omitempty"`
	// color of entity
	Color uint32 `json:"color,omitempty"`
	// note of listener
	Note string `json:"note,omitempty"`
	// last activity of listener
	Last time.Time `json:"last,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ListenerQuery when eager-loading is set.
	Edges        ListenerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ListenerEdges holds the relations/edges for other nodes in the graph.
type ListenerEdges struct {
	// Beacon holds the value of the beacon edge.
	Beacon []*Beacon `json:"beacon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BeaconOrErr returns the Beacon value or an error if the edge
// was not loaded in eager-loading.
func (e ListenerEdges) BeaconOrErr() ([]*Beacon, error) {
	if e.loadedTypes[0] {
		return e.Beacon, nil
	}
	return nil, &NotLoadedError{edge: "beacon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Listener) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case listener.FieldID, listener.FieldPort, listener.FieldColor:
			values[i] = new(sql.NullInt64)
		case listener.FieldToken, listener.FieldName, listener.FieldNote:
			values[i] = new(sql.NullString)
		case listener.FieldCreatedAt, listener.FieldUpdatedAt, listener.FieldDeletedAt, listener.FieldLast:
			values[i] = new(sql.NullTime)
		case listener.FieldIP:
			values[i] = new(types.Inet)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Listener fields.
func (l *Listener) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case listener.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case listener.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case listener.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case listener.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = value.Time
			}
		case listener.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				l.Token = value.String
			}
		case listener.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case listener.FieldIP:
			if value, ok := values[i].(*types.Inet); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value != nil {
				l.IP = *value
			}
		case listener.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				l.Port = uint16(value.Int64)
			}
		case listener.FieldColor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				l.Color = uint32(value.Int64)
			}
		case listener.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				l.Note = value.String
			}
		case listener.FieldLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last", values[i])
			} else if value.Valid {
				l.Last = value.Time
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Listener.
// This includes values selected through modifiers, order, etc.
func (l *Listener) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryBeacon queries the "beacon" edge of the Listener entity.
func (l *Listener) QueryBeacon() *BeaconQuery {
	return NewListenerClient(l.config).QueryBeacon(l)
}

// Update returns a builder for updating this Listener.
// Note that you need to call Listener.Unwrap() before calling this method if this Listener
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Listener) Update() *ListenerUpdateOne {
	return NewListenerClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Listener entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Listener) Unwrap() *Listener {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Listener is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Listener) String() string {
	var builder strings.Builder
	builder.WriteString("Listener(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(l.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(l.Token)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(l.Name)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(fmt.Sprintf("%v", l.IP))
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", l.Port))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(fmt.Sprintf("%v", l.Color))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(l.Note)
	builder.WriteString(", ")
	builder.WriteString("last=")
	builder.WriteString(l.Last.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Listeners is a parsable slice of Listener.
type Listeners []*Listener
