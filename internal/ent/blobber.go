// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/c2micro/c2msrv/internal/ent/blobber"
)

// Blobber is the model entity for the Blobber schema.
type Blobber struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time when entity was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Time when entity was updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Time when entity was soft-deleted
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// non-cryptographic hash of blob
	Hash []byte `json:"hash,omitempty"`
	// blob to store
	Blob []byte `json:"blob,omitempty"`
	// real size of blob
	Size int `json:"size,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlobberQuery when eager-loading is set.
	Edges        BlobberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlobberEdges holds the relations/edges for other nodes in the graph.
type BlobberEdges struct {
	// TaskArgs holds the value of the task_args edge.
	TaskArgs []*Task `json:"task_args,omitempty"`
	// TaskOutput holds the value of the task_output edge.
	TaskOutput []*Task `json:"task_output,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskArgsOrErr returns the TaskArgs value or an error if the edge
// was not loaded in eager-loading.
func (e BlobberEdges) TaskArgsOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.TaskArgs, nil
	}
	return nil, &NotLoadedError{edge: "task_args"}
}

// TaskOutputOrErr returns the TaskOutput value or an error if the edge
// was not loaded in eager-loading.
func (e BlobberEdges) TaskOutputOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.TaskOutput, nil
	}
	return nil, &NotLoadedError{edge: "task_output"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Blobber) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blobber.FieldHash, blobber.FieldBlob:
			values[i] = new([]byte)
		case blobber.FieldID, blobber.FieldSize:
			values[i] = new(sql.NullInt64)
		case blobber.FieldCreatedAt, blobber.FieldUpdatedAt, blobber.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Blobber fields.
func (b *Blobber) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blobber.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case blobber.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case blobber.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case blobber.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				b.DeletedAt = value.Time
			}
		case blobber.FieldHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value != nil {
				b.Hash = *value
			}
		case blobber.FieldBlob:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field blob", values[i])
			} else if value != nil {
				b.Blob = *value
			}
		case blobber.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				b.Size = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Blobber.
// This includes values selected through modifiers, order, etc.
func (b *Blobber) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryTaskArgs queries the "task_args" edge of the Blobber entity.
func (b *Blobber) QueryTaskArgs() *TaskQuery {
	return NewBlobberClient(b.config).QueryTaskArgs(b)
}

// QueryTaskOutput queries the "task_output" edge of the Blobber entity.
func (b *Blobber) QueryTaskOutput() *TaskQuery {
	return NewBlobberClient(b.config).QueryTaskOutput(b)
}

// Update returns a builder for updating this Blobber.
// Note that you need to call Blobber.Unwrap() before calling this method if this Blobber
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Blobber) Update() *BlobberUpdateOne {
	return NewBlobberClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Blobber entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Blobber) Unwrap() *Blobber {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Blobber is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Blobber) String() string {
	var builder strings.Builder
	builder.WriteString("Blobber(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(b.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(fmt.Sprintf("%v", b.Hash))
	builder.WriteString(", ")
	builder.WriteString("blob=")
	builder.WriteString(fmt.Sprintf("%v", b.Blob))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", b.Size))
	builder.WriteByte(')')
	return builder.String()
}

// Blobbers is a parsable slice of Blobber.
type Blobbers []*Blobber
