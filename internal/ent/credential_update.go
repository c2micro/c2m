// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2msrv/internal/ent/credential"
	"github.com/c2micro/c2msrv/internal/ent/predicate"
)

// CredentialUpdate is the builder for updating Credential entities.
type CredentialUpdate struct {
	config
	hooks    []Hook
	mutation *CredentialMutation
}

// Where appends a list predicates to the CredentialUpdate builder.
func (cu *CredentialUpdate) Where(ps ...predicate.Credential) *CredentialUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CredentialUpdate) SetUpdatedAt(t time.Time) *CredentialUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CredentialUpdate) SetDeletedAt(t time.Time) *CredentialUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableDeletedAt(t *time.Time) *CredentialUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CredentialUpdate) ClearDeletedAt() *CredentialUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetUsername sets the "username" field.
func (cu *CredentialUpdate) SetUsername(s string) *CredentialUpdate {
	cu.mutation.SetUsername(s)
	return cu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableUsername(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetUsername(*s)
	}
	return cu
}

// ClearUsername clears the value of the "username" field.
func (cu *CredentialUpdate) ClearUsername() *CredentialUpdate {
	cu.mutation.ClearUsername()
	return cu
}

// SetPassword sets the "password" field.
func (cu *CredentialUpdate) SetPassword(s string) *CredentialUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillablePassword(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetPassword(*s)
	}
	return cu
}

// ClearPassword clears the value of the "password" field.
func (cu *CredentialUpdate) ClearPassword() *CredentialUpdate {
	cu.mutation.ClearPassword()
	return cu
}

// SetRealm sets the "realm" field.
func (cu *CredentialUpdate) SetRealm(s string) *CredentialUpdate {
	cu.mutation.SetRealm(s)
	return cu
}

// SetNillableRealm sets the "realm" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableRealm(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetRealm(*s)
	}
	return cu
}

// ClearRealm clears the value of the "realm" field.
func (cu *CredentialUpdate) ClearRealm() *CredentialUpdate {
	cu.mutation.ClearRealm()
	return cu
}

// SetHost sets the "host" field.
func (cu *CredentialUpdate) SetHost(s string) *CredentialUpdate {
	cu.mutation.SetHost(s)
	return cu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableHost(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetHost(*s)
	}
	return cu
}

// ClearHost clears the value of the "host" field.
func (cu *CredentialUpdate) ClearHost() *CredentialUpdate {
	cu.mutation.ClearHost()
	return cu
}

// SetNote sets the "note" field.
func (cu *CredentialUpdate) SetNote(s string) *CredentialUpdate {
	cu.mutation.SetNote(s)
	return cu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableNote(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetNote(*s)
	}
	return cu
}

// ClearNote clears the value of the "note" field.
func (cu *CredentialUpdate) ClearNote() *CredentialUpdate {
	cu.mutation.ClearNote()
	return cu
}

// SetColor sets the "color" field.
func (cu *CredentialUpdate) SetColor(u uint32) *CredentialUpdate {
	cu.mutation.ResetColor()
	cu.mutation.SetColor(u)
	return cu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableColor(u *uint32) *CredentialUpdate {
	if u != nil {
		cu.SetColor(*u)
	}
	return cu
}

// AddColor adds u to the "color" field.
func (cu *CredentialUpdate) AddColor(u int32) *CredentialUpdate {
	cu.mutation.AddColor(u)
	return cu
}

// Mutation returns the CredentialMutation object of the builder.
func (cu *CredentialUpdate) Mutation() *CredentialMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CredentialUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CredentialUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CredentialUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CredentialUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if credential.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized credential.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := credential.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CredentialUpdate) check() error {
	if v, ok := cu.mutation.Username(); ok {
		if err := credential.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Credential.username": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Password(); ok {
		if err := credential.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Credential.password": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Realm(); ok {
		if err := credential.RealmValidator(v); err != nil {
			return &ValidationError{Name: "realm", err: fmt.Errorf(`ent: validator failed for field "Credential.realm": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Host(); ok {
		if err := credential.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Credential.host": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Note(); ok {
		if err := credential.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Credential.note": %w`, err)}
		}
	}
	return nil
}

func (cu *CredentialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(credential.Table, credential.Columns, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(credential.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(credential.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(credential.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Username(); ok {
		_spec.SetField(credential.FieldUsername, field.TypeString, value)
	}
	if cu.mutation.UsernameCleared() {
		_spec.ClearField(credential.FieldUsername, field.TypeString)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(credential.FieldPassword, field.TypeString, value)
	}
	if cu.mutation.PasswordCleared() {
		_spec.ClearField(credential.FieldPassword, field.TypeString)
	}
	if value, ok := cu.mutation.Realm(); ok {
		_spec.SetField(credential.FieldRealm, field.TypeString, value)
	}
	if cu.mutation.RealmCleared() {
		_spec.ClearField(credential.FieldRealm, field.TypeString)
	}
	if value, ok := cu.mutation.Host(); ok {
		_spec.SetField(credential.FieldHost, field.TypeString, value)
	}
	if cu.mutation.HostCleared() {
		_spec.ClearField(credential.FieldHost, field.TypeString)
	}
	if value, ok := cu.mutation.Note(); ok {
		_spec.SetField(credential.FieldNote, field.TypeString, value)
	}
	if cu.mutation.NoteCleared() {
		_spec.ClearField(credential.FieldNote, field.TypeString)
	}
	if value, ok := cu.mutation.Color(); ok {
		_spec.SetField(credential.FieldColor, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedColor(); ok {
		_spec.AddField(credential.FieldColor, field.TypeUint32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CredentialUpdateOne is the builder for updating a single Credential entity.
type CredentialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CredentialMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CredentialUpdateOne) SetUpdatedAt(t time.Time) *CredentialUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CredentialUpdateOne) SetDeletedAt(t time.Time) *CredentialUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableDeletedAt(t *time.Time) *CredentialUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CredentialUpdateOne) ClearDeletedAt() *CredentialUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetUsername sets the "username" field.
func (cuo *CredentialUpdateOne) SetUsername(s string) *CredentialUpdateOne {
	cuo.mutation.SetUsername(s)
	return cuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableUsername(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetUsername(*s)
	}
	return cuo
}

// ClearUsername clears the value of the "username" field.
func (cuo *CredentialUpdateOne) ClearUsername() *CredentialUpdateOne {
	cuo.mutation.ClearUsername()
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *CredentialUpdateOne) SetPassword(s string) *CredentialUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillablePassword(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetPassword(*s)
	}
	return cuo
}

// ClearPassword clears the value of the "password" field.
func (cuo *CredentialUpdateOne) ClearPassword() *CredentialUpdateOne {
	cuo.mutation.ClearPassword()
	return cuo
}

// SetRealm sets the "realm" field.
func (cuo *CredentialUpdateOne) SetRealm(s string) *CredentialUpdateOne {
	cuo.mutation.SetRealm(s)
	return cuo
}

// SetNillableRealm sets the "realm" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableRealm(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetRealm(*s)
	}
	return cuo
}

// ClearRealm clears the value of the "realm" field.
func (cuo *CredentialUpdateOne) ClearRealm() *CredentialUpdateOne {
	cuo.mutation.ClearRealm()
	return cuo
}

// SetHost sets the "host" field.
func (cuo *CredentialUpdateOne) SetHost(s string) *CredentialUpdateOne {
	cuo.mutation.SetHost(s)
	return cuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableHost(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetHost(*s)
	}
	return cuo
}

// ClearHost clears the value of the "host" field.
func (cuo *CredentialUpdateOne) ClearHost() *CredentialUpdateOne {
	cuo.mutation.ClearHost()
	return cuo
}

// SetNote sets the "note" field.
func (cuo *CredentialUpdateOne) SetNote(s string) *CredentialUpdateOne {
	cuo.mutation.SetNote(s)
	return cuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableNote(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetNote(*s)
	}
	return cuo
}

// ClearNote clears the value of the "note" field.
func (cuo *CredentialUpdateOne) ClearNote() *CredentialUpdateOne {
	cuo.mutation.ClearNote()
	return cuo
}

// SetColor sets the "color" field.
func (cuo *CredentialUpdateOne) SetColor(u uint32) *CredentialUpdateOne {
	cuo.mutation.ResetColor()
	cuo.mutation.SetColor(u)
	return cuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableColor(u *uint32) *CredentialUpdateOne {
	if u != nil {
		cuo.SetColor(*u)
	}
	return cuo
}

// AddColor adds u to the "color" field.
func (cuo *CredentialUpdateOne) AddColor(u int32) *CredentialUpdateOne {
	cuo.mutation.AddColor(u)
	return cuo
}

// Mutation returns the CredentialMutation object of the builder.
func (cuo *CredentialUpdateOne) Mutation() *CredentialMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CredentialUpdate builder.
func (cuo *CredentialUpdateOne) Where(ps ...predicate.Credential) *CredentialUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CredentialUpdateOne) Select(field string, fields ...string) *CredentialUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Credential entity.
func (cuo *CredentialUpdateOne) Save(ctx context.Context) (*Credential, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CredentialUpdateOne) SaveX(ctx context.Context) *Credential {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CredentialUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CredentialUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if credential.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized credential.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := credential.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CredentialUpdateOne) check() error {
	if v, ok := cuo.mutation.Username(); ok {
		if err := credential.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Credential.username": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Password(); ok {
		if err := credential.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Credential.password": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Realm(); ok {
		if err := credential.RealmValidator(v); err != nil {
			return &ValidationError{Name: "realm", err: fmt.Errorf(`ent: validator failed for field "Credential.realm": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Host(); ok {
		if err := credential.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Credential.host": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Note(); ok {
		if err := credential.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Credential.note": %w`, err)}
		}
	}
	return nil
}

func (cuo *CredentialUpdateOne) sqlSave(ctx context.Context) (_node *Credential, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(credential.Table, credential.Columns, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Credential.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, credential.FieldID)
		for _, f := range fields {
			if !credential.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != credential.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(credential.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(credential.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(credential.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Username(); ok {
		_spec.SetField(credential.FieldUsername, field.TypeString, value)
	}
	if cuo.mutation.UsernameCleared() {
		_spec.ClearField(credential.FieldUsername, field.TypeString)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(credential.FieldPassword, field.TypeString, value)
	}
	if cuo.mutation.PasswordCleared() {
		_spec.ClearField(credential.FieldPassword, field.TypeString)
	}
	if value, ok := cuo.mutation.Realm(); ok {
		_spec.SetField(credential.FieldRealm, field.TypeString, value)
	}
	if cuo.mutation.RealmCleared() {
		_spec.ClearField(credential.FieldRealm, field.TypeString)
	}
	if value, ok := cuo.mutation.Host(); ok {
		_spec.SetField(credential.FieldHost, field.TypeString, value)
	}
	if cuo.mutation.HostCleared() {
		_spec.ClearField(credential.FieldHost, field.TypeString)
	}
	if value, ok := cuo.mutation.Note(); ok {
		_spec.SetField(credential.FieldNote, field.TypeString, value)
	}
	if cuo.mutation.NoteCleared() {
		_spec.ClearField(credential.FieldNote, field.TypeString)
	}
	if value, ok := cuo.mutation.Color(); ok {
		_spec.SetField(credential.FieldColor, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedColor(); ok {
		_spec.AddField(credential.FieldColor, field.TypeUint32, value)
	}
	_node = &Credential{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
