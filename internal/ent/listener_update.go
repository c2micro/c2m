// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/c2micro/c2m/internal/ent/beacon"
	"github.com/c2micro/c2m/internal/ent/listener"
	"github.com/c2micro/c2m/internal/ent/predicate"
	"github.com/c2micro/c2m/internal/types"
)

// ListenerUpdate is the builder for updating Listener entities.
type ListenerUpdate struct {
	config
	hooks    []Hook
	mutation *ListenerMutation
}

// Where appends a list predicates to the ListenerUpdate builder.
func (lu *ListenerUpdate) Where(ps ...predicate.Listener) *ListenerUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *ListenerUpdate) SetUpdatedAt(t time.Time) *ListenerUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetDeletedAt sets the "deleted_at" field.
func (lu *ListenerUpdate) SetDeletedAt(t time.Time) *ListenerUpdate {
	lu.mutation.SetDeletedAt(t)
	return lu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillableDeletedAt(t *time.Time) *ListenerUpdate {
	if t != nil {
		lu.SetDeletedAt(*t)
	}
	return lu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lu *ListenerUpdate) ClearDeletedAt() *ListenerUpdate {
	lu.mutation.ClearDeletedAt()
	return lu
}

// SetToken sets the "token" field.
func (lu *ListenerUpdate) SetToken(s string) *ListenerUpdate {
	lu.mutation.SetToken(s)
	return lu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillableToken(s *string) *ListenerUpdate {
	if s != nil {
		lu.SetToken(*s)
	}
	return lu
}

// ClearToken clears the value of the "token" field.
func (lu *ListenerUpdate) ClearToken() *ListenerUpdate {
	lu.mutation.ClearToken()
	return lu
}

// SetName sets the "name" field.
func (lu *ListenerUpdate) SetName(s string) *ListenerUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillableName(s *string) *ListenerUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// ClearName clears the value of the "name" field.
func (lu *ListenerUpdate) ClearName() *ListenerUpdate {
	lu.mutation.ClearName()
	return lu
}

// SetIP sets the "ip" field.
func (lu *ListenerUpdate) SetIP(t types.Inet) *ListenerUpdate {
	lu.mutation.SetIP(t)
	return lu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillableIP(t *types.Inet) *ListenerUpdate {
	if t != nil {
		lu.SetIP(*t)
	}
	return lu
}

// ClearIP clears the value of the "ip" field.
func (lu *ListenerUpdate) ClearIP() *ListenerUpdate {
	lu.mutation.ClearIP()
	return lu
}

// SetPort sets the "port" field.
func (lu *ListenerUpdate) SetPort(u uint16) *ListenerUpdate {
	lu.mutation.ResetPort()
	lu.mutation.SetPort(u)
	return lu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillablePort(u *uint16) *ListenerUpdate {
	if u != nil {
		lu.SetPort(*u)
	}
	return lu
}

// AddPort adds u to the "port" field.
func (lu *ListenerUpdate) AddPort(u int16) *ListenerUpdate {
	lu.mutation.AddPort(u)
	return lu
}

// ClearPort clears the value of the "port" field.
func (lu *ListenerUpdate) ClearPort() *ListenerUpdate {
	lu.mutation.ClearPort()
	return lu
}

// SetColor sets the "color" field.
func (lu *ListenerUpdate) SetColor(u uint32) *ListenerUpdate {
	lu.mutation.ResetColor()
	lu.mutation.SetColor(u)
	return lu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillableColor(u *uint32) *ListenerUpdate {
	if u != nil {
		lu.SetColor(*u)
	}
	return lu
}

// AddColor adds u to the "color" field.
func (lu *ListenerUpdate) AddColor(u int32) *ListenerUpdate {
	lu.mutation.AddColor(u)
	return lu
}

// SetNote sets the "note" field.
func (lu *ListenerUpdate) SetNote(s string) *ListenerUpdate {
	lu.mutation.SetNote(s)
	return lu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillableNote(s *string) *ListenerUpdate {
	if s != nil {
		lu.SetNote(*s)
	}
	return lu
}

// ClearNote clears the value of the "note" field.
func (lu *ListenerUpdate) ClearNote() *ListenerUpdate {
	lu.mutation.ClearNote()
	return lu
}

// SetLast sets the "last" field.
func (lu *ListenerUpdate) SetLast(t time.Time) *ListenerUpdate {
	lu.mutation.SetLast(t)
	return lu
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (lu *ListenerUpdate) SetNillableLast(t *time.Time) *ListenerUpdate {
	if t != nil {
		lu.SetLast(*t)
	}
	return lu
}

// AddBeaconIDs adds the "beacon" edge to the Beacon entity by IDs.
func (lu *ListenerUpdate) AddBeaconIDs(ids ...int) *ListenerUpdate {
	lu.mutation.AddBeaconIDs(ids...)
	return lu
}

// AddBeacon adds the "beacon" edges to the Beacon entity.
func (lu *ListenerUpdate) AddBeacon(b ...*Beacon) *ListenerUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.AddBeaconIDs(ids...)
}

// Mutation returns the ListenerMutation object of the builder.
func (lu *ListenerUpdate) Mutation() *ListenerMutation {
	return lu.mutation
}

// ClearBeacon clears all "beacon" edges to the Beacon entity.
func (lu *ListenerUpdate) ClearBeacon() *ListenerUpdate {
	lu.mutation.ClearBeacon()
	return lu
}

// RemoveBeaconIDs removes the "beacon" edge to Beacon entities by IDs.
func (lu *ListenerUpdate) RemoveBeaconIDs(ids ...int) *ListenerUpdate {
	lu.mutation.RemoveBeaconIDs(ids...)
	return lu
}

// RemoveBeacon removes "beacon" edges to Beacon entities.
func (lu *ListenerUpdate) RemoveBeacon(b ...*Beacon) *ListenerUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.RemoveBeaconIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *ListenerUpdate) Save(ctx context.Context) (int, error) {
	if err := lu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *ListenerUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *ListenerUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *ListenerUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *ListenerUpdate) defaults() error {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		if listener.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized listener.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := listener.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lu *ListenerUpdate) check() error {
	if v, ok := lu.mutation.Token(); ok {
		if err := listener.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Listener.token": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Name(); ok {
		if err := listener.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Listener.name": %w`, err)}
		}
	}
	if v, ok := lu.mutation.IP(); ok {
		if err := listener.IPValidator(v.String()); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Listener.ip": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Port(); ok {
		if err := listener.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Listener.port": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Note(); ok {
		if err := listener.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Listener.note": %w`, err)}
		}
	}
	return nil
}

func (lu *ListenerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(listener.Table, listener.Columns, sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(listener.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.DeletedAt(); ok {
		_spec.SetField(listener.FieldDeletedAt, field.TypeTime, value)
	}
	if lu.mutation.DeletedAtCleared() {
		_spec.ClearField(listener.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := lu.mutation.Token(); ok {
		_spec.SetField(listener.FieldToken, field.TypeString, value)
	}
	if lu.mutation.TokenCleared() {
		_spec.ClearField(listener.FieldToken, field.TypeString)
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(listener.FieldName, field.TypeString, value)
	}
	if lu.mutation.NameCleared() {
		_spec.ClearField(listener.FieldName, field.TypeString)
	}
	if value, ok := lu.mutation.IP(); ok {
		_spec.SetField(listener.FieldIP, field.TypeString, value)
	}
	if lu.mutation.IPCleared() {
		_spec.ClearField(listener.FieldIP, field.TypeString)
	}
	if value, ok := lu.mutation.Port(); ok {
		_spec.SetField(listener.FieldPort, field.TypeUint16, value)
	}
	if value, ok := lu.mutation.AddedPort(); ok {
		_spec.AddField(listener.FieldPort, field.TypeUint16, value)
	}
	if lu.mutation.PortCleared() {
		_spec.ClearField(listener.FieldPort, field.TypeUint16)
	}
	if value, ok := lu.mutation.Color(); ok {
		_spec.SetField(listener.FieldColor, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedColor(); ok {
		_spec.AddField(listener.FieldColor, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.Note(); ok {
		_spec.SetField(listener.FieldNote, field.TypeString, value)
	}
	if lu.mutation.NoteCleared() {
		_spec.ClearField(listener.FieldNote, field.TypeString)
	}
	if value, ok := lu.mutation.Last(); ok {
		_spec.SetField(listener.FieldLast, field.TypeTime, value)
	}
	if lu.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listener.BeaconTable,
			Columns: []string{listener.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedBeaconIDs(); len(nodes) > 0 && !lu.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listener.BeaconTable,
			Columns: []string{listener.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listener.BeaconTable,
			Columns: []string{listener.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listener.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// ListenerUpdateOne is the builder for updating a single Listener entity.
type ListenerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ListenerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *ListenerUpdateOne) SetUpdatedAt(t time.Time) *ListenerUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetDeletedAt sets the "deleted_at" field.
func (luo *ListenerUpdateOne) SetDeletedAt(t time.Time) *ListenerUpdateOne {
	luo.mutation.SetDeletedAt(t)
	return luo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillableDeletedAt(t *time.Time) *ListenerUpdateOne {
	if t != nil {
		luo.SetDeletedAt(*t)
	}
	return luo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (luo *ListenerUpdateOne) ClearDeletedAt() *ListenerUpdateOne {
	luo.mutation.ClearDeletedAt()
	return luo
}

// SetToken sets the "token" field.
func (luo *ListenerUpdateOne) SetToken(s string) *ListenerUpdateOne {
	luo.mutation.SetToken(s)
	return luo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillableToken(s *string) *ListenerUpdateOne {
	if s != nil {
		luo.SetToken(*s)
	}
	return luo
}

// ClearToken clears the value of the "token" field.
func (luo *ListenerUpdateOne) ClearToken() *ListenerUpdateOne {
	luo.mutation.ClearToken()
	return luo
}

// SetName sets the "name" field.
func (luo *ListenerUpdateOne) SetName(s string) *ListenerUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillableName(s *string) *ListenerUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// ClearName clears the value of the "name" field.
func (luo *ListenerUpdateOne) ClearName() *ListenerUpdateOne {
	luo.mutation.ClearName()
	return luo
}

// SetIP sets the "ip" field.
func (luo *ListenerUpdateOne) SetIP(t types.Inet) *ListenerUpdateOne {
	luo.mutation.SetIP(t)
	return luo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillableIP(t *types.Inet) *ListenerUpdateOne {
	if t != nil {
		luo.SetIP(*t)
	}
	return luo
}

// ClearIP clears the value of the "ip" field.
func (luo *ListenerUpdateOne) ClearIP() *ListenerUpdateOne {
	luo.mutation.ClearIP()
	return luo
}

// SetPort sets the "port" field.
func (luo *ListenerUpdateOne) SetPort(u uint16) *ListenerUpdateOne {
	luo.mutation.ResetPort()
	luo.mutation.SetPort(u)
	return luo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillablePort(u *uint16) *ListenerUpdateOne {
	if u != nil {
		luo.SetPort(*u)
	}
	return luo
}

// AddPort adds u to the "port" field.
func (luo *ListenerUpdateOne) AddPort(u int16) *ListenerUpdateOne {
	luo.mutation.AddPort(u)
	return luo
}

// ClearPort clears the value of the "port" field.
func (luo *ListenerUpdateOne) ClearPort() *ListenerUpdateOne {
	luo.mutation.ClearPort()
	return luo
}

// SetColor sets the "color" field.
func (luo *ListenerUpdateOne) SetColor(u uint32) *ListenerUpdateOne {
	luo.mutation.ResetColor()
	luo.mutation.SetColor(u)
	return luo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillableColor(u *uint32) *ListenerUpdateOne {
	if u != nil {
		luo.SetColor(*u)
	}
	return luo
}

// AddColor adds u to the "color" field.
func (luo *ListenerUpdateOne) AddColor(u int32) *ListenerUpdateOne {
	luo.mutation.AddColor(u)
	return luo
}

// SetNote sets the "note" field.
func (luo *ListenerUpdateOne) SetNote(s string) *ListenerUpdateOne {
	luo.mutation.SetNote(s)
	return luo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillableNote(s *string) *ListenerUpdateOne {
	if s != nil {
		luo.SetNote(*s)
	}
	return luo
}

// ClearNote clears the value of the "note" field.
func (luo *ListenerUpdateOne) ClearNote() *ListenerUpdateOne {
	luo.mutation.ClearNote()
	return luo
}

// SetLast sets the "last" field.
func (luo *ListenerUpdateOne) SetLast(t time.Time) *ListenerUpdateOne {
	luo.mutation.SetLast(t)
	return luo
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (luo *ListenerUpdateOne) SetNillableLast(t *time.Time) *ListenerUpdateOne {
	if t != nil {
		luo.SetLast(*t)
	}
	return luo
}

// AddBeaconIDs adds the "beacon" edge to the Beacon entity by IDs.
func (luo *ListenerUpdateOne) AddBeaconIDs(ids ...int) *ListenerUpdateOne {
	luo.mutation.AddBeaconIDs(ids...)
	return luo
}

// AddBeacon adds the "beacon" edges to the Beacon entity.
func (luo *ListenerUpdateOne) AddBeacon(b ...*Beacon) *ListenerUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.AddBeaconIDs(ids...)
}

// Mutation returns the ListenerMutation object of the builder.
func (luo *ListenerUpdateOne) Mutation() *ListenerMutation {
	return luo.mutation
}

// ClearBeacon clears all "beacon" edges to the Beacon entity.
func (luo *ListenerUpdateOne) ClearBeacon() *ListenerUpdateOne {
	luo.mutation.ClearBeacon()
	return luo
}

// RemoveBeaconIDs removes the "beacon" edge to Beacon entities by IDs.
func (luo *ListenerUpdateOne) RemoveBeaconIDs(ids ...int) *ListenerUpdateOne {
	luo.mutation.RemoveBeaconIDs(ids...)
	return luo
}

// RemoveBeacon removes "beacon" edges to Beacon entities.
func (luo *ListenerUpdateOne) RemoveBeacon(b ...*Beacon) *ListenerUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.RemoveBeaconIDs(ids...)
}

// Where appends a list predicates to the ListenerUpdate builder.
func (luo *ListenerUpdateOne) Where(ps ...predicate.Listener) *ListenerUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *ListenerUpdateOne) Select(field string, fields ...string) *ListenerUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Listener entity.
func (luo *ListenerUpdateOne) Save(ctx context.Context) (*Listener, error) {
	if err := luo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *ListenerUpdateOne) SaveX(ctx context.Context) *Listener {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *ListenerUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *ListenerUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *ListenerUpdateOne) defaults() error {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		if listener.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized listener.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := listener.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (luo *ListenerUpdateOne) check() error {
	if v, ok := luo.mutation.Token(); ok {
		if err := listener.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Listener.token": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Name(); ok {
		if err := listener.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Listener.name": %w`, err)}
		}
	}
	if v, ok := luo.mutation.IP(); ok {
		if err := listener.IPValidator(v.String()); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Listener.ip": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Port(); ok {
		if err := listener.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Listener.port": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Note(); ok {
		if err := listener.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Listener.note": %w`, err)}
		}
	}
	return nil
}

func (luo *ListenerUpdateOne) sqlSave(ctx context.Context) (_node *Listener, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(listener.Table, listener.Columns, sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Listener.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, listener.FieldID)
		for _, f := range fields {
			if !listener.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != listener.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(listener.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.DeletedAt(); ok {
		_spec.SetField(listener.FieldDeletedAt, field.TypeTime, value)
	}
	if luo.mutation.DeletedAtCleared() {
		_spec.ClearField(listener.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := luo.mutation.Token(); ok {
		_spec.SetField(listener.FieldToken, field.TypeString, value)
	}
	if luo.mutation.TokenCleared() {
		_spec.ClearField(listener.FieldToken, field.TypeString)
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(listener.FieldName, field.TypeString, value)
	}
	if luo.mutation.NameCleared() {
		_spec.ClearField(listener.FieldName, field.TypeString)
	}
	if value, ok := luo.mutation.IP(); ok {
		_spec.SetField(listener.FieldIP, field.TypeString, value)
	}
	if luo.mutation.IPCleared() {
		_spec.ClearField(listener.FieldIP, field.TypeString)
	}
	if value, ok := luo.mutation.Port(); ok {
		_spec.SetField(listener.FieldPort, field.TypeUint16, value)
	}
	if value, ok := luo.mutation.AddedPort(); ok {
		_spec.AddField(listener.FieldPort, field.TypeUint16, value)
	}
	if luo.mutation.PortCleared() {
		_spec.ClearField(listener.FieldPort, field.TypeUint16)
	}
	if value, ok := luo.mutation.Color(); ok {
		_spec.SetField(listener.FieldColor, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedColor(); ok {
		_spec.AddField(listener.FieldColor, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.Note(); ok {
		_spec.SetField(listener.FieldNote, field.TypeString, value)
	}
	if luo.mutation.NoteCleared() {
		_spec.ClearField(listener.FieldNote, field.TypeString)
	}
	if value, ok := luo.mutation.Last(); ok {
		_spec.SetField(listener.FieldLast, field.TypeTime, value)
	}
	if luo.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listener.BeaconTable,
			Columns: []string{listener.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedBeaconIDs(); len(nodes) > 0 && !luo.mutation.BeaconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listener.BeaconTable,
			Columns: []string{listener.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.BeaconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listener.BeaconTable,
			Columns: []string{listener.BeaconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(beacon.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Listener{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listener.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
